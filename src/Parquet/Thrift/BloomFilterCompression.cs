/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable CS1591   // Missing XML comment for publicly visible type or member
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class BloomFilterCompression : TBase
   {
      private global::Parquet.Thrift.Uncompressed _UNCOMPRESSED;

      public global::Parquet.Thrift.Uncompressed UNCOMPRESSED
      {
         get
         {
            return _UNCOMPRESSED;
         }
         set
         {
            __isset.UNCOMPRESSED = true;
            this._UNCOMPRESSED = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool UNCOMPRESSED;
      }

      public BloomFilterCompression()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        UNCOMPRESSED = new global::Parquet.Thrift.Uncompressed();
                        await UNCOMPRESSED.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp100 = new TStruct("BloomFilterCompression");
            await oprot.WriteStructBeginAsync(tmp100, cancellationToken);
            var tmp101 = new TField();
            if ((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
            {
               tmp101.Name = "UNCOMPRESSED";
               tmp101.Type = TType.Struct;
               tmp101.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp101, cancellationToken);
               await UNCOMPRESSED.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is BloomFilterCompression other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.UNCOMPRESSED == other.__isset.UNCOMPRESSED) && ((!__isset.UNCOMPRESSED) || (System.Object.Equals(UNCOMPRESSED, other.UNCOMPRESSED))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
            {
               hashcode = (hashcode * 397) + UNCOMPRESSED.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp102 = new StringBuilder("BloomFilterCompression(");
         int tmp103 = 0;
         if ((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
         {
            if (0 < tmp103++) { tmp102.Append(", "); }
            tmp102.Append("UNCOMPRESSED: ");
            UNCOMPRESSED.ToString(tmp102);
         }
         tmp102.Append(')');
         return tmp102.ToString();
      }
   }

}