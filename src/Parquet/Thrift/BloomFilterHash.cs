/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable CS1591   // Missing XML comment for publicly visible type or member
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// The hash function used in Bloom filter. This function takes the hash of a column value
   /// using plain encoding.
   /// 
   /// </summary>
   partial class BloomFilterHash : TBase
   {
      private global::Parquet.Thrift.XxHash _XXHASH;

      /// <summary>
      /// xxHash Strategy. *
      /// </summary>
      internal global::Parquet.Thrift.XxHash XXHASH
      {
         get
         {
            return _XXHASH;
         }
         set
         {
            __isset.XXHASH = true;
            this._XXHASH = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool XXHASH;
      }

      public BloomFilterHash()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        XXHASH = new global::Parquet.Thrift.XxHash();
                        await XXHASH.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp93 = new TStruct("BloomFilterHash");
            await oprot.WriteStructBeginAsync(tmp93, cancellationToken);
            var tmp94 = new TField();
            if ((XXHASH != null) && __isset.XXHASH)
            {
               tmp94.Name = "XXHASH";
               tmp94.Type = TType.Struct;
               tmp94.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp94, cancellationToken);
               await XXHASH.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is BloomFilterHash other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.XXHASH == other.__isset.XXHASH) && ((!__isset.XXHASH) || (System.Object.Equals(XXHASH, other.XXHASH))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((XXHASH != null) && __isset.XXHASH)
            {
               hashcode = (hashcode * 397) + XXHASH.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp95 = new StringBuilder("BloomFilterHash(");
         int tmp96 = 0;
         if ((XXHASH != null) && __isset.XXHASH)
         {
            if (0 < tmp96++) { tmp95.Append(", "); }
            tmp95.Append("XXHASH: ");
            XXHASH.ToString(tmp95);
         }
         tmp95.Append(')');
         return tmp95.ToString();
      }
   }
}