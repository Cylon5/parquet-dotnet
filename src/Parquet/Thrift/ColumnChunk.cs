/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class ColumnChunk : TBase
   {
      private string _file_path;
      private global::Parquet.Thrift.ColumnMetaData _meta_data;
      private long _offset_index_offset;
      private int _offset_index_length;
      private long _column_index_offset;
      private int _column_index_length;
      private global::Parquet.Thrift.ColumnCryptoMetaData _crypto_metadata;
      private byte[] _encrypted_column_metadata;

      /// <summary>
      /// File where column data is stored.  If not set, assumed to be same file as
      /// metadata.  This path is relative to the current file.
      /// 
      /// </summary>
      public string File_path
      {
         get
         {
            return _file_path;
         }
         set
         {
            __isset.file_path = true;
            this._file_path = value;
         }
      }

      /// <summary>
      /// Byte offset in file_path to the ColumnMetaData *
      /// </summary>
      public long File_offset { get; set; }

      /// <summary>
      /// Column metadata for this chunk. This is the same content as what is at
      /// file_path/file_offset.  Having it here has it replicated in the file
      /// metadata.
      /// 
      /// </summary>
      public global::Parquet.Thrift.ColumnMetaData Meta_data
      {
         get
         {
            return _meta_data;
         }
         set
         {
            __isset.meta_data = true;
            this._meta_data = value;
         }
      }

      /// <summary>
      /// File offset of ColumnChunk's OffsetIndex *
      /// </summary>
      public long Offset_index_offset
      {
         get
         {
            return _offset_index_offset;
         }
         set
         {
            __isset.offset_index_offset = true;
            this._offset_index_offset = value;
         }
      }

      /// <summary>
      /// Size of ColumnChunk's OffsetIndex, in bytes *
      /// </summary>
      public int Offset_index_length
      {
         get
         {
            return _offset_index_length;
         }
         set
         {
            __isset.offset_index_length = true;
            this._offset_index_length = value;
         }
      }

      /// <summary>
      /// File offset of ColumnChunk's ColumnIndex *
      /// </summary>
      public long Column_index_offset
      {
         get
         {
            return _column_index_offset;
         }
         set
         {
            __isset.column_index_offset = true;
            this._column_index_offset = value;
         }
      }

      /// <summary>
      /// Size of ColumnChunk's ColumnIndex, in bytes *
      /// </summary>
      public int Column_index_length
      {
         get
         {
            return _column_index_length;
         }
         set
         {
            __isset.column_index_length = true;
            this._column_index_length = value;
         }
      }

      /// <summary>
      /// Crypto metadata of encrypted columns *
      /// </summary>
      public global::Parquet.Thrift.ColumnCryptoMetaData Crypto_metadata
      {
         get
         {
            return _crypto_metadata;
         }
         set
         {
            __isset.crypto_metadata = true;
            this._crypto_metadata = value;
         }
      }

      /// <summary>
      /// Encrypted column metadata for this chunk *
      /// </summary>
      public byte[] Encrypted_column_metadata
      {
         get
         {
            return _encrypted_column_metadata;
         }
         set
         {
            __isset.encrypted_column_metadata = true;
            this._encrypted_column_metadata = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool file_path;
         public bool meta_data;
         public bool offset_index_offset;
         public bool offset_index_length;
         public bool column_index_offset;
         public bool column_index_length;
         public bool crypto_metadata;
         public bool encrypted_column_metadata;
      }

      public ColumnChunk()
      {
      }

      public ColumnChunk(long file_offset) : this()
      {
         this.File_offset = file_offset;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_file_offset = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.String)
                     {
                        File_path = await iprot.ReadStringAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.I64)
                     {
                        File_offset = await iprot.ReadI64Async(cancellationToken);
                        isset_file_offset = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.Struct)
                     {
                        Meta_data = new global::Parquet.Thrift.ColumnMetaData();
                        await Meta_data.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I64)
                     {
                        Offset_index_offset = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.I32)
                     {
                        Offset_index_length = await iprot.ReadI32Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 6:
                     if (field.Type == TType.I64)
                     {
                        Column_index_offset = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 7:
                     if (field.Type == TType.I32)
                     {
                        Column_index_length = await iprot.ReadI32Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 8:
                     if (field.Type == TType.Struct)
                     {
                        Crypto_metadata = new global::Parquet.Thrift.ColumnCryptoMetaData();
                        await Crypto_metadata.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 9:
                     if (field.Type == TType.String)
                     {
                        Encrypted_column_metadata = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_file_offset)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp159 = new TStruct("ColumnChunk");
            await oprot.WriteStructBeginAsync(tmp159, cancellationToken);
            var tmp160 = new TField();
            if ((File_path != null) && __isset.file_path)
            {
               tmp160.Name = "file_path";
               tmp160.Type = TType.String;
               tmp160.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteStringAsync(File_path, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp160.Name = "file_offset";
            tmp160.Type = TType.I64;
            tmp160.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
            await oprot.WriteI64Async(File_offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Meta_data != null) && __isset.meta_data)
            {
               tmp160.Name = "meta_data";
               tmp160.Type = TType.Struct;
               tmp160.ID = 3;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await Meta_data.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.offset_index_offset)
            {
               tmp160.Name = "offset_index_offset";
               tmp160.Type = TType.I64;
               tmp160.ID = 4;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteI64Async(Offset_index_offset, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.offset_index_length)
            {
               tmp160.Name = "offset_index_length";
               tmp160.Type = TType.I32;
               tmp160.ID = 5;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteI32Async(Offset_index_length, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.column_index_offset)
            {
               tmp160.Name = "column_index_offset";
               tmp160.Type = TType.I64;
               tmp160.ID = 6;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteI64Async(Column_index_offset, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.column_index_length)
            {
               tmp160.Name = "column_index_length";
               tmp160.Type = TType.I32;
               tmp160.ID = 7;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteI32Async(Column_index_length, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Crypto_metadata != null) && __isset.crypto_metadata)
            {
               tmp160.Name = "crypto_metadata";
               tmp160.Type = TType.Struct;
               tmp160.ID = 8;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await Crypto_metadata.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
            {
               tmp160.Name = "encrypted_column_metadata";
               tmp160.Type = TType.String;
               tmp160.ID = 9;
               await oprot.WriteFieldBeginAsync(tmp160, cancellationToken);
               await oprot.WriteBinaryAsync(Encrypted_column_metadata, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is ColumnChunk other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.file_path == other.__isset.file_path) && ((!__isset.file_path) || (System.Object.Equals(File_path, other.File_path))))
           && System.Object.Equals(File_offset, other.File_offset)
           && ((__isset.meta_data == other.__isset.meta_data) && ((!__isset.meta_data) || (System.Object.Equals(Meta_data, other.Meta_data))))
           && ((__isset.offset_index_offset == other.__isset.offset_index_offset) && ((!__isset.offset_index_offset) || (System.Object.Equals(Offset_index_offset, other.Offset_index_offset))))
           && ((__isset.offset_index_length == other.__isset.offset_index_length) && ((!__isset.offset_index_length) || (System.Object.Equals(Offset_index_length, other.Offset_index_length))))
           && ((__isset.column_index_offset == other.__isset.column_index_offset) && ((!__isset.column_index_offset) || (System.Object.Equals(Column_index_offset, other.Column_index_offset))))
           && ((__isset.column_index_length == other.__isset.column_index_length) && ((!__isset.column_index_length) || (System.Object.Equals(Column_index_length, other.Column_index_length))))
           && ((__isset.crypto_metadata == other.__isset.crypto_metadata) && ((!__isset.crypto_metadata) || (System.Object.Equals(Crypto_metadata, other.Crypto_metadata))))
           && ((__isset.encrypted_column_metadata == other.__isset.encrypted_column_metadata) && ((!__isset.encrypted_column_metadata) || (TCollections.Equals(Encrypted_column_metadata, other.Encrypted_column_metadata))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((File_path != null) && __isset.file_path)
            {
               hashcode = (hashcode * 397) + File_path.GetHashCode();
            }
            hashcode = (hashcode * 397) + File_offset.GetHashCode();
            if ((Meta_data != null) && __isset.meta_data)
            {
               hashcode = (hashcode * 397) + Meta_data.GetHashCode();
            }
            if (__isset.offset_index_offset)
            {
               hashcode = (hashcode * 397) + Offset_index_offset.GetHashCode();
            }
            if (__isset.offset_index_length)
            {
               hashcode = (hashcode * 397) + Offset_index_length.GetHashCode();
            }
            if (__isset.column_index_offset)
            {
               hashcode = (hashcode * 397) + Column_index_offset.GetHashCode();
            }
            if (__isset.column_index_length)
            {
               hashcode = (hashcode * 397) + Column_index_length.GetHashCode();
            }
            if ((Crypto_metadata != null) && __isset.crypto_metadata)
            {
               hashcode = (hashcode * 397) + Crypto_metadata.GetHashCode();
            }
            if ((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
            {
               hashcode = (hashcode * 397) + Encrypted_column_metadata.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp161 = new StringBuilder("ColumnChunk(");
         int tmp162 = 0;
         if ((File_path != null) && __isset.file_path)
         {
            if (0 < tmp162++) { tmp161.Append(", "); }
            tmp161.Append("File_path: ");
            File_path.ToString(tmp161);
         }
         if (0 < tmp162) { tmp161.Append(", "); }
         tmp161.Append("File_offset: ");
         File_offset.ToString(tmp161);
         if ((Meta_data != null) && __isset.meta_data)
         {
            tmp161.Append(", Meta_data: ");
            Meta_data.ToString(tmp161);
         }
         if (__isset.offset_index_offset)
         {
            tmp161.Append(", Offset_index_offset: ");
            Offset_index_offset.ToString(tmp161);
         }
         if (__isset.offset_index_length)
         {
            tmp161.Append(", Offset_index_length: ");
            Offset_index_length.ToString(tmp161);
         }
         if (__isset.column_index_offset)
         {
            tmp161.Append(", Column_index_offset: ");
            Column_index_offset.ToString(tmp161);
         }
         if (__isset.column_index_length)
         {
            tmp161.Append(", Column_index_length: ");
            Column_index_length.ToString(tmp161);
         }
         if ((Crypto_metadata != null) && __isset.crypto_metadata)
         {
            tmp161.Append(", Crypto_metadata: ");
            Crypto_metadata.ToString(tmp161);
         }
         if ((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
         {
            tmp161.Append(", Encrypted_column_metadata: ");
            Encrypted_column_metadata.ToString(tmp161);
         }
         tmp161.Append(')');
         return tmp161.ToString();
      }
   }

}
