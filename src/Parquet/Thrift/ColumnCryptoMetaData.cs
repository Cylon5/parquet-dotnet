/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class ColumnCryptoMetaData : TBase
   {
      private global::Parquet.Thrift.EncryptionWithFooterKey _ENCRYPTION_WITH_FOOTER_KEY;
      private global::Parquet.Thrift.EncryptionWithColumnKey _ENCRYPTION_WITH_COLUMN_KEY;

      public global::Parquet.Thrift.EncryptionWithFooterKey ENCRYPTION_WITH_FOOTER_KEY
      {
         get
         {
            return _ENCRYPTION_WITH_FOOTER_KEY;
         }
         set
         {
            __isset.ENCRYPTION_WITH_FOOTER_KEY = true;
            this._ENCRYPTION_WITH_FOOTER_KEY = value;
         }
      }

      public global::Parquet.Thrift.EncryptionWithColumnKey ENCRYPTION_WITH_COLUMN_KEY
      {
         get
         {
            return _ENCRYPTION_WITH_COLUMN_KEY;
         }
         set
         {
            __isset.ENCRYPTION_WITH_COLUMN_KEY = true;
            this._ENCRYPTION_WITH_COLUMN_KEY = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool ENCRYPTION_WITH_FOOTER_KEY;
         public bool ENCRYPTION_WITH_COLUMN_KEY;
      }

      public ColumnCryptoMetaData()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        ENCRYPTION_WITH_FOOTER_KEY = new global::Parquet.Thrift.EncryptionWithFooterKey();
                        await ENCRYPTION_WITH_FOOTER_KEY.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Struct)
                     {
                        ENCRYPTION_WITH_COLUMN_KEY = new global::Parquet.Thrift.EncryptionWithColumnKey();
                        await ENCRYPTION_WITH_COLUMN_KEY.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp155 = new TStruct("ColumnCryptoMetaData");
            await oprot.WriteStructBeginAsync(tmp155, cancellationToken);
            var tmp156 = new TField();
            if ((ENCRYPTION_WITH_FOOTER_KEY != null) && __isset.ENCRYPTION_WITH_FOOTER_KEY)
            {
               tmp156.Name = "ENCRYPTION_WITH_FOOTER_KEY";
               tmp156.Type = TType.Struct;
               tmp156.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp156, cancellationToken);
               await ENCRYPTION_WITH_FOOTER_KEY.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((ENCRYPTION_WITH_COLUMN_KEY != null) && __isset.ENCRYPTION_WITH_COLUMN_KEY)
            {
               tmp156.Name = "ENCRYPTION_WITH_COLUMN_KEY";
               tmp156.Type = TType.Struct;
               tmp156.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp156, cancellationToken);
               await ENCRYPTION_WITH_COLUMN_KEY.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is ColumnCryptoMetaData other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.ENCRYPTION_WITH_FOOTER_KEY == other.__isset.ENCRYPTION_WITH_FOOTER_KEY) && ((!__isset.ENCRYPTION_WITH_FOOTER_KEY) || (System.Object.Equals(ENCRYPTION_WITH_FOOTER_KEY, other.ENCRYPTION_WITH_FOOTER_KEY))))
           && ((__isset.ENCRYPTION_WITH_COLUMN_KEY == other.__isset.ENCRYPTION_WITH_COLUMN_KEY) && ((!__isset.ENCRYPTION_WITH_COLUMN_KEY) || (System.Object.Equals(ENCRYPTION_WITH_COLUMN_KEY, other.ENCRYPTION_WITH_COLUMN_KEY))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((ENCRYPTION_WITH_FOOTER_KEY != null) && __isset.ENCRYPTION_WITH_FOOTER_KEY)
            {
               hashcode = (hashcode * 397) + ENCRYPTION_WITH_FOOTER_KEY.GetHashCode();
            }
            if ((ENCRYPTION_WITH_COLUMN_KEY != null) && __isset.ENCRYPTION_WITH_COLUMN_KEY)
            {
               hashcode = (hashcode * 397) + ENCRYPTION_WITH_COLUMN_KEY.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp157 = new StringBuilder("ColumnCryptoMetaData(");
         int tmp158 = 0;
         if ((ENCRYPTION_WITH_FOOTER_KEY != null) && __isset.ENCRYPTION_WITH_FOOTER_KEY)
         {
            if (0 < tmp158++) { tmp157.Append(", "); }
            tmp157.Append("ENCRYPTION_WITH_FOOTER_KEY: ");
            ENCRYPTION_WITH_FOOTER_KEY.ToString(tmp157);
         }
         if ((ENCRYPTION_WITH_COLUMN_KEY != null) && __isset.ENCRYPTION_WITH_COLUMN_KEY)
         {
            if (0 < tmp158++) { tmp157.Append(", "); }
            tmp157.Append("ENCRYPTION_WITH_COLUMN_KEY: ");
            ENCRYPTION_WITH_COLUMN_KEY.ToString(tmp157);
         }
         tmp157.Append(')');
         return tmp157.ToString();
      }
   }

}
