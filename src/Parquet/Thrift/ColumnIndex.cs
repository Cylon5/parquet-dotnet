/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Description for ColumnIndex.
   /// Each &lt;array-field&gt;[i] refers to the page at OffsetIndex.page_locations[i]
   /// </summary>
   partial class ColumnIndex : TBase
   {
      private List<long> _null_counts;

      /// <summary>
      /// A list of Boolean values to determine the validity of the corresponding
      /// min and max values. If true, a page contains only null values, and writers
      /// have to set the corresponding entries in min_values and max_values to
      /// byte[0], so that all lists have the same length. If false, the
      /// corresponding entries in min_values and max_values must be valid.
      /// </summary>
      public List<bool> Null_pages { get; set; }

      /// <summary>
      /// Two lists containing lower and upper bounds for the values of each page
      /// determined by the ColumnOrder of the column. These may be the actual
      /// minimum and maximum values found on a page, but can also be (more compact)
      /// values that do not exist on a page. For example, instead of storing ""Blart
      /// Versenwald III", a writer may set min_values[i]="B", max_values[i]="C".
      /// Such more compact values must still be valid values within the column's
      /// logical type. Readers must make sure that list entries are populated before
      /// using them by inspecting null_pages.
      /// </summary>
      public List<byte[]> Min_values { get; set; }

      public List<byte[]> Max_values { get; set; }

      /// <summary>
      /// Stores whether both min_values and max_values are orderd and if so, in
      /// which direction. This allows readers to perform binary searches in both
      /// lists. Readers cannot assume that max_values&lt;i&gt; &lt;= min_values&lt;i+1&gt;, even
      /// if the lists are ordered.
      /// 
      /// <seealso cref="global::Parquet.Thrift.BoundaryOrder"/>
      /// </summary>
      public global::Parquet.Thrift.BoundaryOrder Boundary_order { get; set; }

      /// <summary>
      /// A list containing the number of null values for each page *
      /// </summary>
      public List<long> Null_counts
      {
         get
         {
            return _null_counts;
         }
         set
         {
            __isset.null_counts = true;
            this._null_counts = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool null_counts;
      }

      public ColumnIndex()
      {
      }

      public ColumnIndex(List<bool> null_pages, List<byte[]> min_values, List<byte[]> max_values, global::Parquet.Thrift.BoundaryOrder boundary_order) : this()
      {
         this.Null_pages = null_pages;
         this.Min_values = min_values;
         this.Max_values = max_values;
         this.Boundary_order = boundary_order;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_null_pages = false;
            bool isset_min_values = false;
            bool isset_max_values = false;
            bool isset_boundary_order = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list194 = await iprot.ReadListBeginAsync(cancellationToken);
                           Null_pages = new List<bool>(_list194.Count);
                           for (int _i195 = 0; _i195 < _list194.Count; ++_i195)
                           {
                              bool _elem196;
                              _elem196 = await iprot.ReadBoolAsync(cancellationToken);
                              Null_pages.Add(_elem196);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_null_pages = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list197 = await iprot.ReadListBeginAsync(cancellationToken);
                           Min_values = new List<byte[]>(_list197.Count);
                           for (int _i198 = 0; _i198 < _list197.Count; ++_i198)
                           {
                              byte[] _elem199;
                              _elem199 = await iprot.ReadBinaryAsync(cancellationToken);
                              Min_values.Add(_elem199);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_min_values = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list200 = await iprot.ReadListBeginAsync(cancellationToken);
                           Max_values = new List<byte[]>(_list200.Count);
                           for (int _i201 = 0; _i201 < _list200.Count; ++_i201)
                           {
                              byte[] _elem202;
                              _elem202 = await iprot.ReadBinaryAsync(cancellationToken);
                              Max_values.Add(_elem202);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_max_values = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I32)
                     {
                        Boundary_order = (global::Parquet.Thrift.BoundaryOrder)await iprot.ReadI32Async(cancellationToken);
                        isset_boundary_order = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list203 = await iprot.ReadListBeginAsync(cancellationToken);
                           Null_counts = new List<long>(_list203.Count);
                           for (int _i204 = 0; _i204 < _list203.Count; ++_i204)
                           {
                              long _elem205;
                              _elem205 = await iprot.ReadI64Async(cancellationToken);
                              Null_counts.Add(_elem205);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_null_pages)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_min_values)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_max_values)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_boundary_order)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp206 = new TStruct("ColumnIndex");
            await oprot.WriteStructBeginAsync(tmp206, cancellationToken);
            var tmp207 = new TField();
            if ((Null_pages != null))
            {
               tmp207.Name = "null_pages";
               tmp207.Type = TType.List;
               tmp207.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Bool, Null_pages.Count), cancellationToken);
                  foreach (bool _iter208 in Null_pages)
                  {
                     await oprot.WriteBoolAsync(_iter208, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Min_values != null))
            {
               tmp207.Name = "min_values";
               tmp207.Type = TType.List;
               tmp207.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.String, Min_values.Count), cancellationToken);
                  foreach (byte[] _iter209 in Min_values)
                  {
                     await oprot.WriteBinaryAsync(_iter209, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Max_values != null))
            {
               tmp207.Name = "max_values";
               tmp207.Type = TType.List;
               tmp207.ID = 3;
               await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.String, Max_values.Count), cancellationToken);
                  foreach (byte[] _iter210 in Max_values)
                  {
                     await oprot.WriteBinaryAsync(_iter210, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp207.Name = "boundary_order";
            tmp207.Type = TType.I32;
            tmp207.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
            await oprot.WriteI32Async((int)Boundary_order, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Null_counts != null) && __isset.null_counts)
            {
               tmp207.Name = "null_counts";
               tmp207.Type = TType.List;
               tmp207.ID = 5;
               await oprot.WriteFieldBeginAsync(tmp207, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.I64, Null_counts.Count), cancellationToken);
                  foreach (long _iter211 in Null_counts)
                  {
                     await oprot.WriteI64Async(_iter211, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is ColumnIndex other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return TCollections.Equals(Null_pages, other.Null_pages)
           && TCollections.Equals(Min_values, other.Min_values)
           && TCollections.Equals(Max_values, other.Max_values)
           && System.Object.Equals(Boundary_order, other.Boundary_order)
           && ((__isset.null_counts == other.__isset.null_counts) && ((!__isset.null_counts) || (TCollections.Equals(Null_counts, other.Null_counts))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Null_pages != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_pages);
            }
            if ((Min_values != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Min_values);
            }
            if ((Max_values != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Max_values);
            }
            hashcode = (hashcode * 397) + Boundary_order.GetHashCode();
            if ((Null_counts != null) && __isset.null_counts)
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_counts);
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp212 = new StringBuilder("ColumnIndex(");
         if ((Null_pages != null))
         {
            tmp212.Append(", Null_pages: ");
            Null_pages.ToString(tmp212);
         }
         if ((Min_values != null))
         {
            tmp212.Append(", Min_values: ");
            Min_values.ToString(tmp212);
         }
         if ((Max_values != null))
         {
            tmp212.Append(", Max_values: ");
            Max_values.ToString(tmp212);
         }
         tmp212.Append(", Boundary_order: ");
         Boundary_order.ToString(tmp212);
         if ((Null_counts != null) && __isset.null_counts)
         {
            tmp212.Append(", Null_counts: ");
            Null_counts.ToString(tmp212);
         }
         tmp212.Append(')');
         return tmp212.ToString();
      }
   }

}
