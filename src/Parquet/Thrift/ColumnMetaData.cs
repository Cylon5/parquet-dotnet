/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Description for column metadata
   /// </summary>
   partial class ColumnMetaData : TBase
   {
      private List<global::Parquet.Thrift.KeyValue> _key_value_metadata;
      private long _index_page_offset;
      private long _dictionary_page_offset;
      private global::Parquet.Thrift.Statistics _statistics;
      private List<global::Parquet.Thrift.PageEncodingStats> _encoding_stats;
      private long _bloom_filter_offset;

      /// <summary>
      /// Type of this column *
      /// 
      /// <seealso cref="global::Parquet.Thrift.Type"/>
      /// </summary>
      public global::Parquet.Thrift.Type Type { get; set; }

      /// <summary>
      /// Set of all encodings used for this column. The purpose is to validate
      /// whether we can decode those pages. *
      /// </summary>
      public List<global::Parquet.Thrift.Encoding> Encodings { get; set; }

      /// <summary>
      /// Path in schema *
      /// </summary>
      public List<string> Path_in_schema { get; set; }

      /// <summary>
      /// Compression codec *
      /// 
      /// <seealso cref="global::Parquet.Thrift.CompressionCodec"/>
      /// </summary>
      public global::Parquet.Thrift.CompressionCodec Codec { get; set; }

      /// <summary>
      /// Number of values in this column *
      /// </summary>
      public long Num_values { get; set; }

      /// <summary>
      /// total byte size of all uncompressed pages in this column chunk (including the headers) *
      /// </summary>
      public long Total_uncompressed_size { get; set; }

      /// <summary>
      /// total byte size of all compressed, and potentially encrypted, pages
      /// in this column chunk (including the headers) *
      /// </summary>
      public long Total_compressed_size { get; set; }

      /// <summary>
      /// Optional key/value metadata *
      /// </summary>
      public List<global::Parquet.Thrift.KeyValue> Key_value_metadata
      {
         get
         {
            return _key_value_metadata;
         }
         set
         {
            __isset.key_value_metadata = true;
            this._key_value_metadata = value;
         }
      }

      /// <summary>
      /// Byte offset from beginning of file to first data page *
      /// </summary>
      public long Data_page_offset { get; set; }

      /// <summary>
      /// Byte offset from beginning of file to root index page *
      /// </summary>
      public long Index_page_offset
      {
         get
         {
            return _index_page_offset;
         }
         set
         {
            __isset.index_page_offset = true;
            this._index_page_offset = value;
         }
      }

      /// <summary>
      /// Byte offset from the beginning of file to first (only) dictionary page *
      /// </summary>
      public long Dictionary_page_offset
      {
         get
         {
            return _dictionary_page_offset;
         }
         set
         {
            __isset.dictionary_page_offset = true;
            this._dictionary_page_offset = value;
         }
      }

      /// <summary>
      /// optional statistics for this column chunk
      /// </summary>
      public global::Parquet.Thrift.Statistics Statistics
      {
         get
         {
            return _statistics;
         }
         set
         {
            __isset.statistics = true;
            this._statistics = value;
         }
      }

      /// <summary>
      /// Set of all encodings used for pages in this column chunk.
      /// This information can be used to determine if all data pages are
      /// dictionary encoded for example *
      /// </summary>
      public List<global::Parquet.Thrift.PageEncodingStats> Encoding_stats
      {
         get
         {
            return _encoding_stats;
         }
         set
         {
            __isset.encoding_stats = true;
            this._encoding_stats = value;
         }
      }

      /// <summary>
      /// Byte offset from beginning of file to Bloom filter data. *
      /// </summary>
      public long Bloom_filter_offset
      {
         get
         {
            return _bloom_filter_offset;
         }
         set
         {
            __isset.bloom_filter_offset = true;
            this._bloom_filter_offset = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool key_value_metadata;
         public bool index_page_offset;
         public bool dictionary_page_offset;
         public bool statistics;
         public bool encoding_stats;
         public bool bloom_filter_offset;
      }

      public ColumnMetaData()
      {
      }

      public ColumnMetaData(global::Parquet.Thrift.Type type, List<global::Parquet.Thrift.Encoding> encodings, List<string> path_in_schema, global::Parquet.Thrift.CompressionCodec codec, long num_values, long total_uncompressed_size, long total_compressed_size, long data_page_offset) : this()
      {
         this.Type = type;
         this.Encodings = encodings;
         this.Path_in_schema = path_in_schema;
         this.Codec = codec;
         this.Num_values = num_values;
         this.Total_uncompressed_size = total_uncompressed_size;
         this.Total_compressed_size = total_compressed_size;
         this.Data_page_offset = data_page_offset;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_type = false;
            bool isset_encodings = false;
            bool isset_path_in_schema = false;
            bool isset_codec = false;
            bool isset_num_values = false;
            bool isset_total_uncompressed_size = false;
            bool isset_total_compressed_size = false;
            bool isset_data_page_offset = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.I32)
                     {
                        Type = (global::Parquet.Thrift.Type)await iprot.ReadI32Async(cancellationToken);
                        isset_type = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list124 = await iprot.ReadListBeginAsync(cancellationToken);
                           Encodings = new List<global::Parquet.Thrift.Encoding>(_list124.Count);
                           for (int _i125 = 0; _i125 < _list124.Count; ++_i125)
                           {
                              global::Parquet.Thrift.Encoding _elem126;
                              _elem126 = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                              Encodings.Add(_elem126);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_encodings = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list127 = await iprot.ReadListBeginAsync(cancellationToken);
                           Path_in_schema = new List<string>(_list127.Count);
                           for (int _i128 = 0; _i128 < _list127.Count; ++_i128)
                           {
                              string _elem129;
                              _elem129 = await iprot.ReadStringAsync(cancellationToken);
                              Path_in_schema.Add(_elem129);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_path_in_schema = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I32)
                     {
                        Codec = (global::Parquet.Thrift.CompressionCodec)await iprot.ReadI32Async(cancellationToken);
                        isset_codec = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.I64)
                     {
                        Num_values = await iprot.ReadI64Async(cancellationToken);
                        isset_num_values = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 6:
                     if (field.Type == TType.I64)
                     {
                        Total_uncompressed_size = await iprot.ReadI64Async(cancellationToken);
                        isset_total_uncompressed_size = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 7:
                     if (field.Type == TType.I64)
                     {
                        Total_compressed_size = await iprot.ReadI64Async(cancellationToken);
                        isset_total_compressed_size = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 8:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list130 = await iprot.ReadListBeginAsync(cancellationToken);
                           Key_value_metadata = new List<global::Parquet.Thrift.KeyValue>(_list130.Count);
                           for (int _i131 = 0; _i131 < _list130.Count; ++_i131)
                           {
                              global::Parquet.Thrift.KeyValue _elem132;
                              _elem132 = new global::Parquet.Thrift.KeyValue();
                              await _elem132.ReadAsync(iprot, cancellationToken);
                              Key_value_metadata.Add(_elem132);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 9:
                     if (field.Type == TType.I64)
                     {
                        Data_page_offset = await iprot.ReadI64Async(cancellationToken);
                        isset_data_page_offset = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 10:
                     if (field.Type == TType.I64)
                     {
                        Index_page_offset = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 11:
                     if (field.Type == TType.I64)
                     {
                        Dictionary_page_offset = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 12:
                     if (field.Type == TType.Struct)
                     {
                        Statistics = new global::Parquet.Thrift.Statistics();
                        await Statistics.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 13:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list133 = await iprot.ReadListBeginAsync(cancellationToken);
                           Encoding_stats = new List<global::Parquet.Thrift.PageEncodingStats>(_list133.Count);
                           for (int _i134 = 0; _i134 < _list133.Count; ++_i134)
                           {
                              global::Parquet.Thrift.PageEncodingStats _elem135;
                              _elem135 = new global::Parquet.Thrift.PageEncodingStats();
                              await _elem135.ReadAsync(iprot, cancellationToken);
                              Encoding_stats.Add(_elem135);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 14:
                     if (field.Type == TType.I64)
                     {
                        Bloom_filter_offset = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_type)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_encodings)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_path_in_schema)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_codec)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_num_values)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_total_uncompressed_size)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_total_compressed_size)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_data_page_offset)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp136 = new TStruct("ColumnMetaData");
            await oprot.WriteStructBeginAsync(tmp136, cancellationToken);
            var tmp137 = new TField();
            tmp137.Name = "type";
            tmp137.Type = TType.I32;
            tmp137.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI32Async((int)Type, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Encodings != null))
            {
               tmp137.Name = "encodings";
               tmp137.Type = TType.List;
               tmp137.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.Encoding _iter138 in Encodings)
                  {
                     await oprot.WriteI32Async((int)_iter138, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Path_in_schema != null))
            {
               tmp137.Name = "path_in_schema";
               tmp137.Type = TType.List;
               tmp137.ID = 3;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.String, Path_in_schema.Count), cancellationToken);
                  foreach (string _iter139 in Path_in_schema)
                  {
                     await oprot.WriteStringAsync(_iter139, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp137.Name = "codec";
            tmp137.Type = TType.I32;
            tmp137.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI32Async((int)Codec, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp137.Name = "num_values";
            tmp137.Type = TType.I64;
            tmp137.ID = 5;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI64Async(Num_values, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp137.Name = "total_uncompressed_size";
            tmp137.Type = TType.I64;
            tmp137.ID = 6;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI64Async(Total_uncompressed_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp137.Name = "total_compressed_size";
            tmp137.Type = TType.I64;
            tmp137.ID = 7;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI64Async(Total_compressed_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Key_value_metadata != null) && __isset.key_value_metadata)
            {
               tmp137.Name = "key_value_metadata";
               tmp137.Type = TType.List;
               tmp137.ID = 8;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Key_value_metadata.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.KeyValue _iter140 in Key_value_metadata)
                  {
                     await _iter140.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp137.Name = "data_page_offset";
            tmp137.Type = TType.I64;
            tmp137.ID = 9;
            await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
            await oprot.WriteI64Async(Data_page_offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if (__isset.index_page_offset)
            {
               tmp137.Name = "index_page_offset";
               tmp137.Type = TType.I64;
               tmp137.ID = 10;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               await oprot.WriteI64Async(Index_page_offset, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.dictionary_page_offset)
            {
               tmp137.Name = "dictionary_page_offset";
               tmp137.Type = TType.I64;
               tmp137.ID = 11;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               await oprot.WriteI64Async(Dictionary_page_offset, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Statistics != null) && __isset.statistics)
            {
               tmp137.Name = "statistics";
               tmp137.Type = TType.Struct;
               tmp137.ID = 12;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               await Statistics.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Encoding_stats != null) && __isset.encoding_stats)
            {
               tmp137.Name = "encoding_stats";
               tmp137.Type = TType.List;
               tmp137.ID = 13;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Encoding_stats.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.PageEncodingStats _iter141 in Encoding_stats)
                  {
                     await _iter141.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.bloom_filter_offset)
            {
               tmp137.Name = "bloom_filter_offset";
               tmp137.Type = TType.I64;
               tmp137.ID = 14;
               await oprot.WriteFieldBeginAsync(tmp137, cancellationToken);
               await oprot.WriteI64Async(Bloom_filter_offset, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is ColumnMetaData other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Type, other.Type)
           && TCollections.Equals(Encodings, other.Encodings)
           && TCollections.Equals(Path_in_schema, other.Path_in_schema)
           && System.Object.Equals(Codec, other.Codec)
           && System.Object.Equals(Num_values, other.Num_values)
           && System.Object.Equals(Total_uncompressed_size, other.Total_uncompressed_size)
           && System.Object.Equals(Total_compressed_size, other.Total_compressed_size)
           && ((__isset.key_value_metadata == other.__isset.key_value_metadata) && ((!__isset.key_value_metadata) || (TCollections.Equals(Key_value_metadata, other.Key_value_metadata))))
           && System.Object.Equals(Data_page_offset, other.Data_page_offset)
           && ((__isset.index_page_offset == other.__isset.index_page_offset) && ((!__isset.index_page_offset) || (System.Object.Equals(Index_page_offset, other.Index_page_offset))))
           && ((__isset.dictionary_page_offset == other.__isset.dictionary_page_offset) && ((!__isset.dictionary_page_offset) || (System.Object.Equals(Dictionary_page_offset, other.Dictionary_page_offset))))
           && ((__isset.statistics == other.__isset.statistics) && ((!__isset.statistics) || (System.Object.Equals(Statistics, other.Statistics))))
           && ((__isset.encoding_stats == other.__isset.encoding_stats) && ((!__isset.encoding_stats) || (TCollections.Equals(Encoding_stats, other.Encoding_stats))))
           && ((__isset.bloom_filter_offset == other.__isset.bloom_filter_offset) && ((!__isset.bloom_filter_offset) || (System.Object.Equals(Bloom_filter_offset, other.Bloom_filter_offset))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + Type.GetHashCode();
            if ((Encodings != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
            }
            if ((Path_in_schema != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Path_in_schema);
            }
            hashcode = (hashcode * 397) + Codec.GetHashCode();
            hashcode = (hashcode * 397) + Num_values.GetHashCode();
            hashcode = (hashcode * 397) + Total_uncompressed_size.GetHashCode();
            hashcode = (hashcode * 397) + Total_compressed_size.GetHashCode();
            if ((Key_value_metadata != null) && __isset.key_value_metadata)
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Key_value_metadata);
            }
            hashcode = (hashcode * 397) + Data_page_offset.GetHashCode();
            if (__isset.index_page_offset)
            {
               hashcode = (hashcode * 397) + Index_page_offset.GetHashCode();
            }
            if (__isset.dictionary_page_offset)
            {
               hashcode = (hashcode * 397) + Dictionary_page_offset.GetHashCode();
            }
            if ((Statistics != null) && __isset.statistics)
            {
               hashcode = (hashcode * 397) + Statistics.GetHashCode();
            }
            if ((Encoding_stats != null) && __isset.encoding_stats)
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Encoding_stats);
            }
            if (__isset.bloom_filter_offset)
            {
               hashcode = (hashcode * 397) + Bloom_filter_offset.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp142 = new StringBuilder("ColumnMetaData(");
         tmp142.Append(", Type: ");
         Type.ToString(tmp142);
         if ((Encodings != null))
         {
            tmp142.Append(", Encodings: ");
            Encodings.ToString(tmp142);
         }
         if ((Path_in_schema != null))
         {
            tmp142.Append(", Path_in_schema: ");
            Path_in_schema.ToString(tmp142);
         }
         tmp142.Append(", Codec: ");
         Codec.ToString(tmp142);
         tmp142.Append(", Num_values: ");
         Num_values.ToString(tmp142);
         tmp142.Append(", Total_uncompressed_size: ");
         Total_uncompressed_size.ToString(tmp142);
         tmp142.Append(", Total_compressed_size: ");
         Total_compressed_size.ToString(tmp142);
         if ((Key_value_metadata != null) && __isset.key_value_metadata)
         {
            tmp142.Append(", Key_value_metadata: ");
            Key_value_metadata.ToString(tmp142);
         }
         tmp142.Append(", Data_page_offset: ");
         Data_page_offset.ToString(tmp142);
         if (__isset.index_page_offset)
         {
            tmp142.Append(", Index_page_offset: ");
            Index_page_offset.ToString(tmp142);
         }
         if (__isset.dictionary_page_offset)
         {
            tmp142.Append(", Dictionary_page_offset: ");
            Dictionary_page_offset.ToString(tmp142);
         }
         if ((Statistics != null) && __isset.statistics)
         {
            tmp142.Append(", Statistics: ");
            Statistics.ToString(tmp142);
         }
         if ((Encoding_stats != null) && __isset.encoding_stats)
         {
            tmp142.Append(", Encoding_stats: ");
            Encoding_stats.ToString(tmp142);
         }
         if (__isset.bloom_filter_offset)
         {
            tmp142.Append(", Bloom_filter_offset: ");
            Bloom_filter_offset.ToString(tmp142);
         }
         tmp142.Append(')');
         return tmp142.ToString();
      }
   }

}
