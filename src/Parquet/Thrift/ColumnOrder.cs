/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Union to specify the order used for the min_value and max_value fields for a
   /// column. This union takes the role of an enhanced enum that allows rich
   /// elements (which will be needed for a collation-based ordering in the future).
   /// 
   /// Possible values are:
   /// * TypeDefinedOrder - the column uses the order defined by its logical or
   ///                      physical type (if there is no logical type).
   /// 
   /// If the reader does not support the value of this union, min and max stats
   /// for this column should be ignored.
   /// </summary>
   partial class ColumnOrder : TBase
   {
      private global::Parquet.Thrift.TypeDefinedOrder _TYPE_ORDER;

      /// <summary>
      /// The sort orders for logical types are:
      ///   UTF8 - unsigned byte-wise comparison
      ///   INT8 - signed comparison
      ///   INT16 - signed comparison
      ///   INT32 - signed comparison
      ///   INT64 - signed comparison
      ///   UINT8 - unsigned comparison
      ///   UINT16 - unsigned comparison
      ///   UINT32 - unsigned comparison
      ///   UINT64 - unsigned comparison
      ///   DECIMAL - signed comparison of the represented value
      ///   DATE - signed comparison
      ///   TIME_MILLIS - signed comparison
      ///   TIME_MICROS - signed comparison
      ///   TIMESTAMP_MILLIS - signed comparison
      ///   TIMESTAMP_MICROS - signed comparison
      ///   INTERVAL - unsigned comparison
      ///   JSON - unsigned byte-wise comparison
      ///   BSON - unsigned byte-wise comparison
      ///   ENUM - unsigned byte-wise comparison
      ///   LIST - undefined
      ///   MAP - undefined
      /// 
      /// In the absence of logical types, the sort order is determined by the physical type:
      ///   BOOLEAN - false, true
      ///   INT32 - signed comparison
      ///   INT64 - signed comparison
      ///   INT96 (only used for legacy timestamps) - undefined
      ///   FLOAT - signed comparison of the represented value (*)
      ///   DOUBLE - signed comparison of the represented value (*)
      ///   BYTE_ARRAY - unsigned byte-wise comparison
      ///   FIXED_LEN_BYTE_ARRAY - unsigned byte-wise comparison
      /// 
      /// (*) Because the sorting order is not specified properly for floating
      ///     point values (relations vs. total ordering) the following
      ///     compatibility rules should be applied when reading statistics:
      ///     - If the min is a NaN, it should be ignored.
      ///     - If the max is a NaN, it should be ignored.
      ///     - If the min is +0, the row group may contain -0 values as well.
      ///     - If the max is -0, the row group may contain +0 values as well.
      ///     - When looking for NaN values, min and max should be ignored.
      /// </summary>
      public global::Parquet.Thrift.TypeDefinedOrder TYPE_ORDER
      {
         get
         {
            return _TYPE_ORDER;
         }
         set
         {
            __isset.TYPE_ORDER = true;
            this._TYPE_ORDER = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool TYPE_ORDER;
      }

      public ColumnOrder()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        TYPE_ORDER = new global::Parquet.Thrift.TypeDefinedOrder();
                        await TYPE_ORDER.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp178 = new TStruct("ColumnOrder");
            await oprot.WriteStructBeginAsync(tmp178, cancellationToken);
            var tmp179 = new TField();
            if ((TYPE_ORDER != null) && __isset.TYPE_ORDER)
            {
               tmp179.Name = "TYPE_ORDER";
               tmp179.Type = TType.Struct;
               tmp179.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp179, cancellationToken);
               await TYPE_ORDER.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is ColumnOrder other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.TYPE_ORDER == other.__isset.TYPE_ORDER) && ((!__isset.TYPE_ORDER) || (System.Object.Equals(TYPE_ORDER, other.TYPE_ORDER))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((TYPE_ORDER != null) && __isset.TYPE_ORDER)
            {
               hashcode = (hashcode * 397) + TYPE_ORDER.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp180 = new StringBuilder("ColumnOrder(");
         int tmp181 = 0;
         if ((TYPE_ORDER != null) && __isset.TYPE_ORDER)
         {
            if (0 < tmp181++) { tmp180.Append(", "); }
            tmp180.Append("TYPE_ORDER: ");
            TYPE_ORDER.ToString(tmp180);
         }
         tmp180.Append(')');
         return tmp180.ToString();
      }
   }

}
