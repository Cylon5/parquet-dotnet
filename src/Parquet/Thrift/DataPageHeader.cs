/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Data page header
   /// </summary>
   partial class DataPageHeader : TBase
   {
      private global::Parquet.Thrift.Statistics _statistics;

      /// <summary>
      /// Number of values, including NULLs, in this data page. *
      /// </summary>
      public int Num_values { get; set; }

      /// <summary>
      /// Encoding used for this data page *
      /// 
      /// <seealso cref="global::Parquet.Thrift.Encoding"/>
      /// </summary>
      public global::Parquet.Thrift.Encoding Encoding { get; set; }

      /// <summary>
      /// Encoding used for definition levels *
      /// 
      /// <seealso cref="global::Parquet.Thrift.Encoding"/>
      /// </summary>
      public global::Parquet.Thrift.Encoding Definition_level_encoding { get; set; }

      /// <summary>
      /// Encoding used for repetition levels *
      /// 
      /// <seealso cref="global::Parquet.Thrift.Encoding"/>
      /// </summary>
      public global::Parquet.Thrift.Encoding Repetition_level_encoding { get; set; }

      /// <summary>
      /// Optional statistics for the data in this page*
      /// </summary>
      public global::Parquet.Thrift.Statistics Statistics
      {
         get
         {
            return _statistics;
         }
         set
         {
            __isset.statistics = true;
            this._statistics = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool statistics;
      }

      public DataPageHeader()
      {
      }

      public DataPageHeader(int num_values, global::Parquet.Thrift.Encoding encoding, global::Parquet.Thrift.Encoding definition_level_encoding, global::Parquet.Thrift.Encoding repetition_level_encoding) : this()
      {
         this.Num_values = num_values;
         this.Encoding = encoding;
         this.Definition_level_encoding = definition_level_encoding;
         this.Repetition_level_encoding = repetition_level_encoding;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_num_values = false;
            bool isset_encoding = false;
            bool isset_definition_level_encoding = false;
            bool isset_repetition_level_encoding = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.I32)
                     {
                        Num_values = await iprot.ReadI32Async(cancellationToken);
                        isset_num_values = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.I32)
                     {
                        Encoding = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                        isset_encoding = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.I32)
                     {
                        Definition_level_encoding = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                        isset_definition_level_encoding = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I32)
                     {
                        Repetition_level_encoding = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                        isset_repetition_level_encoding = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.Struct)
                     {
                        Statistics = new global::Parquet.Thrift.Statistics();
                        await Statistics.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_num_values)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_encoding)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_definition_level_encoding)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_repetition_level_encoding)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp68 = new TStruct("DataPageHeader");
            await oprot.WriteStructBeginAsync(tmp68, cancellationToken);
            var tmp69 = new TField();
            tmp69.Name = "num_values";
            tmp69.Type = TType.I32;
            tmp69.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp69, cancellationToken);
            await oprot.WriteI32Async(Num_values, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp69.Name = "encoding";
            tmp69.Type = TType.I32;
            tmp69.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp69, cancellationToken);
            await oprot.WriteI32Async((int)Encoding, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp69.Name = "definition_level_encoding";
            tmp69.Type = TType.I32;
            tmp69.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp69, cancellationToken);
            await oprot.WriteI32Async((int)Definition_level_encoding, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp69.Name = "repetition_level_encoding";
            tmp69.Type = TType.I32;
            tmp69.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp69, cancellationToken);
            await oprot.WriteI32Async((int)Repetition_level_encoding, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Statistics != null) && __isset.statistics)
            {
               tmp69.Name = "statistics";
               tmp69.Type = TType.Struct;
               tmp69.ID = 5;
               await oprot.WriteFieldBeginAsync(tmp69, cancellationToken);
               await Statistics.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is DataPageHeader other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Num_values, other.Num_values)
           && System.Object.Equals(Encoding, other.Encoding)
           && System.Object.Equals(Definition_level_encoding, other.Definition_level_encoding)
           && System.Object.Equals(Repetition_level_encoding, other.Repetition_level_encoding)
           && ((__isset.statistics == other.__isset.statistics) && ((!__isset.statistics) || (System.Object.Equals(Statistics, other.Statistics))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + Num_values.GetHashCode();
            hashcode = (hashcode * 397) + Encoding.GetHashCode();
            hashcode = (hashcode * 397) + Definition_level_encoding.GetHashCode();
            hashcode = (hashcode * 397) + Repetition_level_encoding.GetHashCode();
            if ((Statistics != null) && __isset.statistics)
            {
               hashcode = (hashcode * 397) + Statistics.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp70 = new StringBuilder("DataPageHeader(");
         tmp70.Append(", Num_values: ");
         Num_values.ToString(tmp70);
         tmp70.Append(", Encoding: ");
         Encoding.ToString(tmp70);
         tmp70.Append(", Definition_level_encoding: ");
         Definition_level_encoding.ToString(tmp70);
         tmp70.Append(", Repetition_level_encoding: ");
         Repetition_level_encoding.ToString(tmp70);
         if ((Statistics != null) && __isset.statistics)
         {
            tmp70.Append(", Statistics: ");
            Statistics.ToString(tmp70);
         }
         tmp70.Append(')');
         return tmp70.ToString();
      }
   }

}
