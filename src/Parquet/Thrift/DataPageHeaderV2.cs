/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// New page format allowing reading levels without decompressing the data
   /// Repetition and definition levels are uncompressed
   /// The remaining section containing the data is compressed if is_compressed is true
   /// 
   /// </summary>
   partial class DataPageHeaderV2 : TBase
   {
      private bool _is_compressed;
      private global::Parquet.Thrift.Statistics _statistics;

      /// <summary>
      /// Number of values, including NULLs, in this data page. *
      /// </summary>
      public int Num_values { get; set; }

      /// <summary>
      /// Number of NULL values, in this data page.
      /// Number of non-null = num_values - num_nulls which is also the number of values in the data section *
      /// </summary>
      public int Num_nulls { get; set; }

      /// <summary>
      /// Number of rows in this data page. which means pages change on record boundaries (r = 0) *
      /// </summary>
      public int Num_rows { get; set; }

      /// <summary>
      /// Encoding used for data in this page *
      /// 
      /// <seealso cref="global::Parquet.Thrift.Encoding"/>
      /// </summary>
      public global::Parquet.Thrift.Encoding Encoding { get; set; }

      /// <summary>
      /// length of the definition levels
      /// </summary>
      public int Definition_levels_byte_length { get; set; }

      /// <summary>
      /// length of the repetition levels
      /// </summary>
      public int Repetition_levels_byte_length { get; set; }

      /// <summary>
      /// whether the values are compressed.
      /// Which means the section of the page between
      /// definition_levels_byte_length + repetition_levels_byte_length + 1 and compressed_page_size (included)
      /// is compressed with the compression_codec.
      /// If missing it is considered compressed
      /// </summary>
      public bool Is_compressed
      {
         get
         {
            return _is_compressed;
         }
         set
         {
            __isset.is_compressed = true;
            this._is_compressed = value;
         }
      }

      /// <summary>
      /// optional statistics for the data in this page *
      /// </summary>
      public global::Parquet.Thrift.Statistics Statistics
      {
         get
         {
            return _statistics;
         }
         set
         {
            __isset.statistics = true;
            this._statistics = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool is_compressed;
         public bool statistics;
      }

      public DataPageHeaderV2()
      {
         this._is_compressed = true;
         this.__isset.is_compressed = true;
      }

      public DataPageHeaderV2(int num_values, int num_nulls, int num_rows, global::Parquet.Thrift.Encoding encoding, int definition_levels_byte_length, int repetition_levels_byte_length) : this()
      {
         this.Num_values = num_values;
         this.Num_nulls = num_nulls;
         this.Num_rows = num_rows;
         this.Encoding = encoding;
         this.Definition_levels_byte_length = definition_levels_byte_length;
         this.Repetition_levels_byte_length = repetition_levels_byte_length;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_num_values = false;
            bool isset_num_nulls = false;
            bool isset_num_rows = false;
            bool isset_encoding = false;
            bool isset_definition_levels_byte_length = false;
            bool isset_repetition_levels_byte_length = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.I32)
                     {
                        Num_values = await iprot.ReadI32Async(cancellationToken);
                        isset_num_values = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.I32)
                     {
                        Num_nulls = await iprot.ReadI32Async(cancellationToken);
                        isset_num_nulls = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.I32)
                     {
                        Num_rows = await iprot.ReadI32Async(cancellationToken);
                        isset_num_rows = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I32)
                     {
                        Encoding = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                        isset_encoding = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.I32)
                     {
                        Definition_levels_byte_length = await iprot.ReadI32Async(cancellationToken);
                        isset_definition_levels_byte_length = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 6:
                     if (field.Type == TType.I32)
                     {
                        Repetition_levels_byte_length = await iprot.ReadI32Async(cancellationToken);
                        isset_repetition_levels_byte_length = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 7:
                     if (field.Type == TType.Bool)
                     {
                        Is_compressed = await iprot.ReadBoolAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 8:
                     if (field.Type == TType.Struct)
                     {
                        Statistics = new global::Parquet.Thrift.Statistics();
                        await Statistics.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_num_values)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_num_nulls)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_num_rows)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_encoding)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_definition_levels_byte_length)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_repetition_levels_byte_length)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp79 = new TStruct("DataPageHeaderV2");
            await oprot.WriteStructBeginAsync(tmp79, cancellationToken);
            var tmp80 = new TField();
            tmp80.Name = "num_values";
            tmp80.Type = TType.I32;
            tmp80.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async(Num_values, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp80.Name = "num_nulls";
            tmp80.Type = TType.I32;
            tmp80.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async(Num_nulls, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp80.Name = "num_rows";
            tmp80.Type = TType.I32;
            tmp80.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async(Num_rows, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp80.Name = "encoding";
            tmp80.Type = TType.I32;
            tmp80.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async((int)Encoding, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp80.Name = "definition_levels_byte_length";
            tmp80.Type = TType.I32;
            tmp80.ID = 5;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async(Definition_levels_byte_length, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp80.Name = "repetition_levels_byte_length";
            tmp80.Type = TType.I32;
            tmp80.ID = 6;
            await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
            await oprot.WriteI32Async(Repetition_levels_byte_length, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if (__isset.is_compressed)
            {
               tmp80.Name = "is_compressed";
               tmp80.Type = TType.Bool;
               tmp80.ID = 7;
               await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
               await oprot.WriteBoolAsync(Is_compressed, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Statistics != null) && __isset.statistics)
            {
               tmp80.Name = "statistics";
               tmp80.Type = TType.Struct;
               tmp80.ID = 8;
               await oprot.WriteFieldBeginAsync(tmp80, cancellationToken);
               await Statistics.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is DataPageHeaderV2 other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Num_values, other.Num_values)
           && System.Object.Equals(Num_nulls, other.Num_nulls)
           && System.Object.Equals(Num_rows, other.Num_rows)
           && System.Object.Equals(Encoding, other.Encoding)
           && System.Object.Equals(Definition_levels_byte_length, other.Definition_levels_byte_length)
           && System.Object.Equals(Repetition_levels_byte_length, other.Repetition_levels_byte_length)
           && ((__isset.is_compressed == other.__isset.is_compressed) && ((!__isset.is_compressed) || (System.Object.Equals(Is_compressed, other.Is_compressed))))
           && ((__isset.statistics == other.__isset.statistics) && ((!__isset.statistics) || (System.Object.Equals(Statistics, other.Statistics))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + Num_values.GetHashCode();
            hashcode = (hashcode * 397) + Num_nulls.GetHashCode();
            hashcode = (hashcode * 397) + Num_rows.GetHashCode();
            hashcode = (hashcode * 397) + Encoding.GetHashCode();
            hashcode = (hashcode * 397) + Definition_levels_byte_length.GetHashCode();
            hashcode = (hashcode * 397) + Repetition_levels_byte_length.GetHashCode();
            if (__isset.is_compressed)
            {
               hashcode = (hashcode * 397) + Is_compressed.GetHashCode();
            }
            if ((Statistics != null) && __isset.statistics)
            {
               hashcode = (hashcode * 397) + Statistics.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp81 = new StringBuilder("DataPageHeaderV2(");
         tmp81.Append(", Num_values: ");
         Num_values.ToString(tmp81);
         tmp81.Append(", Num_nulls: ");
         Num_nulls.ToString(tmp81);
         tmp81.Append(", Num_rows: ");
         Num_rows.ToString(tmp81);
         tmp81.Append(", Encoding: ");
         Encoding.ToString(tmp81);
         tmp81.Append(", Definition_levels_byte_length: ");
         Definition_levels_byte_length.ToString(tmp81);
         tmp81.Append(", Repetition_levels_byte_length: ");
         Repetition_levels_byte_length.ToString(tmp81);
         if (__isset.is_compressed)
         {
            tmp81.Append(", Is_compressed: ");
            Is_compressed.ToString(tmp81);
         }
         if ((Statistics != null) && __isset.statistics)
         {
            tmp81.Append(", Statistics: ");
            Statistics.ToString(tmp81);
         }
         tmp81.Append(')');
         return tmp81.ToString();
      }
   }

}
