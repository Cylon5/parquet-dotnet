/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class EncryptionAlgorithm : TBase
   {
      private global::Parquet.Thrift.AesGcmV1 _AES_GCM_V1;
      private global::Parquet.Thrift.AesGcmCtrV1 _AES_GCM_CTR_V1;

      public global::Parquet.Thrift.AesGcmV1 AES_GCM_V1
      {
         get
         {
            return _AES_GCM_V1;
         }
         set
         {
            __isset.AES_GCM_V1 = true;
            this._AES_GCM_V1 = value;
         }
      }

      public global::Parquet.Thrift.AesGcmCtrV1 AES_GCM_CTR_V1
      {
         get
         {
            return _AES_GCM_CTR_V1;
         }
         set
         {
            __isset.AES_GCM_CTR_V1 = true;
            this._AES_GCM_CTR_V1 = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool AES_GCM_V1;
         public bool AES_GCM_CTR_V1;
      }

      public EncryptionAlgorithm()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        AES_GCM_V1 = new global::Parquet.Thrift.AesGcmV1();
                        await AES_GCM_V1.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Struct)
                     {
                        AES_GCM_CTR_V1 = new global::Parquet.Thrift.AesGcmCtrV1();
                        await AES_GCM_CTR_V1.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp222 = new TStruct("EncryptionAlgorithm");
            await oprot.WriteStructBeginAsync(tmp222, cancellationToken);
            var tmp223 = new TField();
            if ((AES_GCM_V1 != null) && __isset.AES_GCM_V1)
            {
               tmp223.Name = "AES_GCM_V1";
               tmp223.Type = TType.Struct;
               tmp223.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp223, cancellationToken);
               await AES_GCM_V1.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((AES_GCM_CTR_V1 != null) && __isset.AES_GCM_CTR_V1)
            {
               tmp223.Name = "AES_GCM_CTR_V1";
               tmp223.Type = TType.Struct;
               tmp223.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp223, cancellationToken);
               await AES_GCM_CTR_V1.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is EncryptionAlgorithm other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.AES_GCM_V1 == other.__isset.AES_GCM_V1) && ((!__isset.AES_GCM_V1) || (System.Object.Equals(AES_GCM_V1, other.AES_GCM_V1))))
           && ((__isset.AES_GCM_CTR_V1 == other.__isset.AES_GCM_CTR_V1) && ((!__isset.AES_GCM_CTR_V1) || (System.Object.Equals(AES_GCM_CTR_V1, other.AES_GCM_CTR_V1))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((AES_GCM_V1 != null) && __isset.AES_GCM_V1)
            {
               hashcode = (hashcode * 397) + AES_GCM_V1.GetHashCode();
            }
            if ((AES_GCM_CTR_V1 != null) && __isset.AES_GCM_CTR_V1)
            {
               hashcode = (hashcode * 397) + AES_GCM_CTR_V1.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp224 = new StringBuilder("EncryptionAlgorithm(");
         int tmp225 = 0;
         if ((AES_GCM_V1 != null) && __isset.AES_GCM_V1)
         {
            if (0 < tmp225++) { tmp224.Append(", "); }
            tmp224.Append("AES_GCM_V1: ");
            AES_GCM_V1.ToString(tmp224);
         }
         if ((AES_GCM_CTR_V1 != null) && __isset.AES_GCM_CTR_V1)
         {
            if (0 < tmp225++) { tmp224.Append(", "); }
            tmp224.Append("AES_GCM_CTR_V1: ");
            AES_GCM_CTR_V1.ToString(tmp224);
         }
         tmp224.Append(')');
         return tmp224.ToString();
      }
   }

}
