/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class EncryptionWithColumnKey : TBase
   {
      private byte[] _key_metadata;

      /// <summary>
      /// Column path in schema *
      /// </summary>
      public List<string> Path_in_schema { get; set; }

      /// <summary>
      /// Retrieval metadata of column encryption key *
      /// </summary>
      public byte[] Key_metadata
      {
         get
         {
            return _key_metadata;
         }
         set
         {
            __isset.key_metadata = true;
            this._key_metadata = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool key_metadata;
      }

      public EncryptionWithColumnKey()
      {
      }

      public EncryptionWithColumnKey(List<string> path_in_schema) : this()
      {
         this.Path_in_schema = path_in_schema;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_path_in_schema = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list147 = await iprot.ReadListBeginAsync(cancellationToken);
                           Path_in_schema = new List<string>(_list147.Count);
                           for (int _i148 = 0; _i148 < _list147.Count; ++_i148)
                           {
                              string _elem149;
                              _elem149 = await iprot.ReadStringAsync(cancellationToken);
                              Path_in_schema.Add(_elem149);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_path_in_schema = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.String)
                     {
                        Key_metadata = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_path_in_schema)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp150 = new TStruct("EncryptionWithColumnKey");
            await oprot.WriteStructBeginAsync(tmp150, cancellationToken);
            var tmp151 = new TField();
            if ((Path_in_schema != null))
            {
               tmp151.Name = "path_in_schema";
               tmp151.Type = TType.List;
               tmp151.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp151, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.String, Path_in_schema.Count), cancellationToken);
                  foreach (string _iter152 in Path_in_schema)
                  {
                     await oprot.WriteStringAsync(_iter152, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Key_metadata != null) && __isset.key_metadata)
            {
               tmp151.Name = "key_metadata";
               tmp151.Type = TType.String;
               tmp151.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp151, cancellationToken);
               await oprot.WriteBinaryAsync(Key_metadata, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is EncryptionWithColumnKey other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return TCollections.Equals(Path_in_schema, other.Path_in_schema)
           && ((__isset.key_metadata == other.__isset.key_metadata) && ((!__isset.key_metadata) || (TCollections.Equals(Key_metadata, other.Key_metadata))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Path_in_schema != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Path_in_schema);
            }
            if ((Key_metadata != null) && __isset.key_metadata)
            {
               hashcode = (hashcode * 397) + Key_metadata.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp153 = new StringBuilder("EncryptionWithColumnKey(");
         if ((Path_in_schema != null))
         {
            tmp153.Append(", Path_in_schema: ");
            Path_in_schema.ToString(tmp153);
         }
         if ((Key_metadata != null) && __isset.key_metadata)
         {
            tmp153.Append(", Key_metadata: ");
            Key_metadata.ToString(tmp153);
         }
         tmp153.Append(')');
         return tmp153.ToString();
      }
   }

}
