/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Crypto metadata for files with encrypted footer *
   /// </summary>
   partial class FileCryptoMetaData : TBase
   {
      private byte[] _key_metadata;

      /// <summary>
      /// Encryption algorithm. This field is only used for files
      /// with encrypted footer. Files with plaintext footer store algorithm id
      /// inside footer (FileMetaData structure).
      /// </summary>
      public global::Parquet.Thrift.EncryptionAlgorithm Encryption_algorithm { get; set; }

      /// <summary>
      /// Retrieval metadata of key used for encryption of footer,
      /// and (possibly) columns *
      /// </summary>
      public byte[] Key_metadata
      {
         get
         {
            return _key_metadata;
         }
         set
         {
            __isset.key_metadata = true;
            this._key_metadata = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool key_metadata;
      }

      public FileCryptoMetaData()
      {
      }

      public FileCryptoMetaData(global::Parquet.Thrift.EncryptionAlgorithm encryption_algorithm) : this()
      {
         this.Encryption_algorithm = encryption_algorithm;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_encryption_algorithm = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        Encryption_algorithm = new global::Parquet.Thrift.EncryptionAlgorithm();
                        await Encryption_algorithm.ReadAsync(iprot, cancellationToken);
                        isset_encryption_algorithm = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.String)
                     {
                        Key_metadata = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_encryption_algorithm)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp246 = new TStruct("FileCryptoMetaData");
            await oprot.WriteStructBeginAsync(tmp246, cancellationToken);
            var tmp247 = new TField();
            if ((Encryption_algorithm != null))
            {
               tmp247.Name = "encryption_algorithm";
               tmp247.Type = TType.Struct;
               tmp247.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp247, cancellationToken);
               await Encryption_algorithm.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Key_metadata != null) && __isset.key_metadata)
            {
               tmp247.Name = "key_metadata";
               tmp247.Type = TType.String;
               tmp247.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp247, cancellationToken);
               await oprot.WriteBinaryAsync(Key_metadata, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is FileCryptoMetaData other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Encryption_algorithm, other.Encryption_algorithm)
           && ((__isset.key_metadata == other.__isset.key_metadata) && ((!__isset.key_metadata) || (TCollections.Equals(Key_metadata, other.Key_metadata))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Encryption_algorithm != null))
            {
               hashcode = (hashcode * 397) + Encryption_algorithm.GetHashCode();
            }
            if ((Key_metadata != null) && __isset.key_metadata)
            {
               hashcode = (hashcode * 397) + Key_metadata.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp248 = new StringBuilder("FileCryptoMetaData(");
         if ((Encryption_algorithm != null))
         {
            tmp248.Append(", Encryption_algorithm: ");
            Encryption_algorithm.ToString(tmp248);
         }
         if ((Key_metadata != null) && __isset.key_metadata)
         {
            tmp248.Append(", Key_metadata: ");
            Key_metadata.ToString(tmp248);
         }
         tmp248.Append(')');
         return tmp248.ToString();
      }
   }

}
