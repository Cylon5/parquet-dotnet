/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Description for file metadata
   /// </summary>
   partial class FileMetaData : TBase
   {
      private List<global::Parquet.Thrift.KeyValue> _key_value_metadata;
      private string _created_by;
      private List<global::Parquet.Thrift.ColumnOrder> _column_orders;
      private global::Parquet.Thrift.EncryptionAlgorithm _encryption_algorithm;
      private byte[] _footer_signing_key_metadata;

      /// <summary>
      /// Version of this file *
      /// </summary>
      public int Version { get; set; }

      /// <summary>
      /// Parquet schema for this file.  This schema contains metadata for all the columns.
      /// The schema is represented as a tree with a single root.  The nodes of the tree
      /// are flattened to a list by doing a depth-first traversal.
      /// The column metadata contains the path in the schema for that column which can be
      /// used to map columns to nodes in the schema.
      /// The first element is the root *
      /// </summary>
      public List<global::Parquet.Thrift.SchemaElement> Schema { get; set; }

      /// <summary>
      /// Number of rows in this file *
      /// </summary>
      public long Num_rows { get; set; }

      /// <summary>
      /// Row groups in this file *
      /// </summary>
      public List<global::Parquet.Thrift.RowGroup> Row_groups { get; set; }

      /// <summary>
      /// Optional key/value metadata *
      /// </summary>
      public List<global::Parquet.Thrift.KeyValue> Key_value_metadata
      {
         get
         {
            return _key_value_metadata;
         }
         set
         {
            __isset.key_value_metadata = true;
            this._key_value_metadata = value;
         }
      }

      /// <summary>
      /// String for application that wrote this file.  This should be in the format
      /// &lt;Application&gt; version &lt;App Version&gt; (build &lt;App Build Hash&gt;).
      /// e.g. impala version 1.0 (build 6cf94d29b2b7115df4de2c06e2ab4326d721eb55)
      /// 
      /// </summary>
      public string Created_by
      {
         get
         {
            return _created_by;
         }
         set
         {
            __isset.created_by = true;
            this._created_by = value;
         }
      }

      /// <summary>
      /// Sort order used for the min_value and max_value fields in the Statistics
      /// objects and the min_values and max_values fields in the ColumnIndex
      /// objects of each column in this file. Sort orders are listed in the order
      /// matching the columns in the schema. The indexes are not necessary the same
      /// though, because only leaf nodes of the schema are represented in the list
      /// of sort orders.
      /// 
      /// Without column_orders, the meaning of the min_value and max_value fields
      /// in the Statistics object and the ColumnIndex object is undefined. To ensure
      /// well-defined behaviour, if these fields are written to a Parquet file,
      /// column_orders must be written as well.
      /// 
      /// The obsolete min and max fields in the Statistics object are always sorted
      /// by signed comparison regardless of column_orders.
      /// </summary>
      public List<global::Parquet.Thrift.ColumnOrder> Column_orders
      {
         get
         {
            return _column_orders;
         }
         set
         {
            __isset.column_orders = true;
            this._column_orders = value;
         }
      }

      /// <summary>
      /// Encryption algorithm. This field is set only in encrypted files
      /// with plaintext footer. Files with encrypted footer store algorithm id
      /// in FileCryptoMetaData structure.
      /// </summary>
      public global::Parquet.Thrift.EncryptionAlgorithm Encryption_algorithm
      {
         get
         {
            return _encryption_algorithm;
         }
         set
         {
            __isset.encryption_algorithm = true;
            this._encryption_algorithm = value;
         }
      }

      /// <summary>
      /// Retrieval metadata of key used for signing the footer.
      /// Used only in encrypted files with plaintext footer.
      /// </summary>
      public byte[] Footer_signing_key_metadata
      {
         get
         {
            return _footer_signing_key_metadata;
         }
         set
         {
            __isset.footer_signing_key_metadata = true;
            this._footer_signing_key_metadata = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool key_value_metadata;
         public bool created_by;
         public bool column_orders;
         public bool encryption_algorithm;
         public bool footer_signing_key_metadata;
      }

      public FileMetaData()
      {
      }

      public FileMetaData(int version, List<global::Parquet.Thrift.SchemaElement> schema, long num_rows, List<global::Parquet.Thrift.RowGroup> row_groups) : this()
      {
         this.Version = version;
         this.Schema = schema;
         this.Num_rows = num_rows;
         this.Row_groups = row_groups;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_version = false;
            bool isset_schema = false;
            bool isset_num_rows = false;
            bool isset_row_groups = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.I32)
                     {
                        Version = await iprot.ReadI32Async(cancellationToken);
                        isset_version = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list226 = await iprot.ReadListBeginAsync(cancellationToken);
                           Schema = new List<global::Parquet.Thrift.SchemaElement>(_list226.Count);
                           for (int _i227 = 0; _i227 < _list226.Count; ++_i227)
                           {
                              global::Parquet.Thrift.SchemaElement _elem228;
                              _elem228 = new global::Parquet.Thrift.SchemaElement();
                              await _elem228.ReadAsync(iprot, cancellationToken);
                              Schema.Add(_elem228);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_schema = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.I64)
                     {
                        Num_rows = await iprot.ReadI64Async(cancellationToken);
                        isset_num_rows = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list229 = await iprot.ReadListBeginAsync(cancellationToken);
                           Row_groups = new List<global::Parquet.Thrift.RowGroup>(_list229.Count);
                           for (int _i230 = 0; _i230 < _list229.Count; ++_i230)
                           {
                              global::Parquet.Thrift.RowGroup _elem231;
                              _elem231 = new global::Parquet.Thrift.RowGroup();
                              await _elem231.ReadAsync(iprot, cancellationToken);
                              Row_groups.Add(_elem231);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_row_groups = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list232 = await iprot.ReadListBeginAsync(cancellationToken);
                           Key_value_metadata = new List<global::Parquet.Thrift.KeyValue>(_list232.Count);
                           for (int _i233 = 0; _i233 < _list232.Count; ++_i233)
                           {
                              global::Parquet.Thrift.KeyValue _elem234;
                              _elem234 = new global::Parquet.Thrift.KeyValue();
                              await _elem234.ReadAsync(iprot, cancellationToken);
                              Key_value_metadata.Add(_elem234);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 6:
                     if (field.Type == TType.String)
                     {
                        Created_by = await iprot.ReadStringAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 7:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list235 = await iprot.ReadListBeginAsync(cancellationToken);
                           Column_orders = new List<global::Parquet.Thrift.ColumnOrder>(_list235.Count);
                           for (int _i236 = 0; _i236 < _list235.Count; ++_i236)
                           {
                              global::Parquet.Thrift.ColumnOrder _elem237;
                              _elem237 = new global::Parquet.Thrift.ColumnOrder();
                              await _elem237.ReadAsync(iprot, cancellationToken);
                              Column_orders.Add(_elem237);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 8:
                     if (field.Type == TType.Struct)
                     {
                        Encryption_algorithm = new global::Parquet.Thrift.EncryptionAlgorithm();
                        await Encryption_algorithm.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 9:
                     if (field.Type == TType.String)
                     {
                        Footer_signing_key_metadata = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_version)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_schema)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_num_rows)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_row_groups)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp238 = new TStruct("FileMetaData");
            await oprot.WriteStructBeginAsync(tmp238, cancellationToken);
            var tmp239 = new TField();
            tmp239.Name = "version";
            tmp239.Type = TType.I32;
            tmp239.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
            await oprot.WriteI32Async(Version, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Schema != null))
            {
               tmp239.Name = "schema";
               tmp239.Type = TType.List;
               tmp239.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Schema.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.SchemaElement _iter240 in Schema)
                  {
                     await _iter240.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp239.Name = "num_rows";
            tmp239.Type = TType.I64;
            tmp239.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
            await oprot.WriteI64Async(Num_rows, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Row_groups != null))
            {
               tmp239.Name = "row_groups";
               tmp239.Type = TType.List;
               tmp239.ID = 4;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Row_groups.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.RowGroup _iter241 in Row_groups)
                  {
                     await _iter241.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Key_value_metadata != null) && __isset.key_value_metadata)
            {
               tmp239.Name = "key_value_metadata";
               tmp239.Type = TType.List;
               tmp239.ID = 5;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Key_value_metadata.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.KeyValue _iter242 in Key_value_metadata)
                  {
                     await _iter242.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Created_by != null) && __isset.created_by)
            {
               tmp239.Name = "created_by";
               tmp239.Type = TType.String;
               tmp239.ID = 6;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               await oprot.WriteStringAsync(Created_by, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Column_orders != null) && __isset.column_orders)
            {
               tmp239.Name = "column_orders";
               tmp239.Type = TType.List;
               tmp239.ID = 7;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Column_orders.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.ColumnOrder _iter243 in Column_orders)
                  {
                     await _iter243.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Encryption_algorithm != null) && __isset.encryption_algorithm)
            {
               tmp239.Name = "encryption_algorithm";
               tmp239.Type = TType.Struct;
               tmp239.ID = 8;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               await Encryption_algorithm.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Footer_signing_key_metadata != null) && __isset.footer_signing_key_metadata)
            {
               tmp239.Name = "footer_signing_key_metadata";
               tmp239.Type = TType.String;
               tmp239.ID = 9;
               await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
               await oprot.WriteBinaryAsync(Footer_signing_key_metadata, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is FileMetaData other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Version, other.Version)
           && TCollections.Equals(Schema, other.Schema)
           && System.Object.Equals(Num_rows, other.Num_rows)
           && TCollections.Equals(Row_groups, other.Row_groups)
           && ((__isset.key_value_metadata == other.__isset.key_value_metadata) && ((!__isset.key_value_metadata) || (TCollections.Equals(Key_value_metadata, other.Key_value_metadata))))
           && ((__isset.created_by == other.__isset.created_by) && ((!__isset.created_by) || (System.Object.Equals(Created_by, other.Created_by))))
           && ((__isset.column_orders == other.__isset.column_orders) && ((!__isset.column_orders) || (TCollections.Equals(Column_orders, other.Column_orders))))
           && ((__isset.encryption_algorithm == other.__isset.encryption_algorithm) && ((!__isset.encryption_algorithm) || (System.Object.Equals(Encryption_algorithm, other.Encryption_algorithm))))
           && ((__isset.footer_signing_key_metadata == other.__isset.footer_signing_key_metadata) && ((!__isset.footer_signing_key_metadata) || (TCollections.Equals(Footer_signing_key_metadata, other.Footer_signing_key_metadata))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + Version.GetHashCode();
            if ((Schema != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Schema);
            }
            hashcode = (hashcode * 397) + Num_rows.GetHashCode();
            if ((Row_groups != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Row_groups);
            }
            if ((Key_value_metadata != null) && __isset.key_value_metadata)
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Key_value_metadata);
            }
            if ((Created_by != null) && __isset.created_by)
            {
               hashcode = (hashcode * 397) + Created_by.GetHashCode();
            }
            if ((Column_orders != null) && __isset.column_orders)
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Column_orders);
            }
            if ((Encryption_algorithm != null) && __isset.encryption_algorithm)
            {
               hashcode = (hashcode * 397) + Encryption_algorithm.GetHashCode();
            }
            if ((Footer_signing_key_metadata != null) && __isset.footer_signing_key_metadata)
            {
               hashcode = (hashcode * 397) + Footer_signing_key_metadata.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp244 = new StringBuilder("FileMetaData(");
         tmp244.Append(", Version: ");
         Version.ToString(tmp244);
         if ((Schema != null))
         {
            tmp244.Append(", Schema: ");
            Schema.ToString(tmp244);
         }
         tmp244.Append(", Num_rows: ");
         Num_rows.ToString(tmp244);
         if ((Row_groups != null))
         {
            tmp244.Append(", Row_groups: ");
            Row_groups.ToString(tmp244);
         }
         if ((Key_value_metadata != null) && __isset.key_value_metadata)
         {
            tmp244.Append(", Key_value_metadata: ");
            Key_value_metadata.ToString(tmp244);
         }
         if ((Created_by != null) && __isset.created_by)
         {
            tmp244.Append(", Created_by: ");
            Created_by.ToString(tmp244);
         }
         if ((Column_orders != null) && __isset.column_orders)
         {
            tmp244.Append(", Column_orders: ");
            Column_orders.ToString(tmp244);
         }
         if ((Encryption_algorithm != null) && __isset.encryption_algorithm)
         {
            tmp244.Append(", Encryption_algorithm: ");
            Encryption_algorithm.ToString(tmp244);
         }
         if ((Footer_signing_key_metadata != null) && __isset.footer_signing_key_metadata)
         {
            tmp244.Append(", Footer_signing_key_metadata: ");
            Footer_signing_key_metadata.ToString(tmp244);
         }
         tmp244.Append(')');
         return tmp244.ToString();
      }
   }

}
