/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Integer logical type annotation
   /// 
   /// bitWidth must be 8, 16, 32, or 64.
   /// 
   /// Allowed for physical types: INT32, INT64
   /// </summary>
   partial class IntType : TBase
   {

      public sbyte BitWidth { get; set; }

      public bool IsSigned { get; set; }

      public IntType()
      {
      }

      public IntType(sbyte bitWidth, bool isSigned) : this()
      {
         this.BitWidth = bitWidth;
         this.IsSigned = isSigned;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_bitWidth = false;
            bool isset_isSigned = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Byte)
                     {
                        BitWidth = await iprot.ReadByteAsync(cancellationToken);
                        isset_bitWidth = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Bool)
                     {
                        IsSigned = await iprot.ReadBoolAsync(cancellationToken);
                        isset_isSigned = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_bitWidth)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_isSigned)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp50 = new TStruct("IntType");
            await oprot.WriteStructBeginAsync(tmp50, cancellationToken);
            var tmp51 = new TField();
            tmp51.Name = "bitWidth";
            tmp51.Type = TType.Byte;
            tmp51.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp51, cancellationToken);
            await oprot.WriteByteAsync(BitWidth, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp51.Name = "isSigned";
            tmp51.Type = TType.Bool;
            tmp51.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp51, cancellationToken);
            await oprot.WriteBoolAsync(IsSigned, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is IntType other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(BitWidth, other.BitWidth)
           && System.Object.Equals(IsSigned, other.IsSigned);
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + BitWidth.GetHashCode();
            hashcode = (hashcode * 397) + IsSigned.GetHashCode();
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp52 = new StringBuilder("IntType(");
         tmp52.Append(", BitWidth: ");
         BitWidth.ToString(tmp52);
         tmp52.Append(", IsSigned: ");
         IsSigned.ToString(tmp52);
         tmp52.Append(')');
         return tmp52.ToString();
      }
   }

}
