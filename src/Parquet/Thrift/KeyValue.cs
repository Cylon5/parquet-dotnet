/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Wrapper struct to store key values
   /// </summary>
   partial class KeyValue : TBase
   {
      private string _value;

      public string Key { get; set; }

      public string Value
      {
         get
         {
            return _value;
         }
         set
         {
            __isset.@value = true;
            this._value = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool @value;
      }

      public KeyValue()
      {
      }

      public KeyValue(string key) : this()
      {
         this.Key = key;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_key = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.String)
                     {
                        Key = await iprot.ReadStringAsync(cancellationToken);
                        isset_key = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.String)
                     {
                        Value = await iprot.ReadStringAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_key)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp112 = new TStruct("KeyValue");
            await oprot.WriteStructBeginAsync(tmp112, cancellationToken);
            var tmp113 = new TField();
            if ((Key != null))
            {
               tmp113.Name = "key";
               tmp113.Type = TType.String;
               tmp113.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp113, cancellationToken);
               await oprot.WriteStringAsync(Key, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Value != null) && __isset.@value)
            {
               tmp113.Name = "value";
               tmp113.Type = TType.String;
               tmp113.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp113, cancellationToken);
               await oprot.WriteStringAsync(Value, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is KeyValue other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Key, other.Key)
           && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (System.Object.Equals(Value, other.Value))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Key != null))
            {
               hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if ((Value != null) && __isset.@value)
            {
               hashcode = (hashcode * 397) + Value.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp114 = new StringBuilder("KeyValue(");
         if ((Key != null))
         {
            tmp114.Append(", Key: ");
            Key.ToString(tmp114);
         }
         if ((Value != null) && __isset.@value)
         {
            tmp114.Append(", Value: ");
            Value.ToString(tmp114);
         }
         tmp114.Append(')');
         return tmp114.ToString();
      }
   }

}
