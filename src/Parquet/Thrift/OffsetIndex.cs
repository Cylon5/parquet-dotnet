/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class OffsetIndex : TBase
   {

      /// <summary>
      /// PageLocations, ordered by increasing PageLocation.offset. It is required
      /// that page_locations[i].first_row_index &lt; page_locations[i+1].first_row_index.
      /// </summary>
      public List<global::Parquet.Thrift.PageLocation> Page_locations { get; set; }

      public OffsetIndex()
      {
      }

      public OffsetIndex(List<global::Parquet.Thrift.PageLocation> page_locations) : this()
      {
         this.Page_locations = page_locations;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_page_locations = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.List)
                     {
                        {
                           TList _list186 = await iprot.ReadListBeginAsync(cancellationToken);
                           Page_locations = new List<global::Parquet.Thrift.PageLocation>(_list186.Count);
                           for (int _i187 = 0; _i187 < _list186.Count; ++_i187)
                           {
                              global::Parquet.Thrift.PageLocation _elem188;
                              _elem188 = new global::Parquet.Thrift.PageLocation();
                              await _elem188.ReadAsync(iprot, cancellationToken);
                              Page_locations.Add(_elem188);
                           }
                           await iprot.ReadListEndAsync(cancellationToken);
                        }
                        isset_page_locations = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_page_locations)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp189 = new TStruct("OffsetIndex");
            await oprot.WriteStructBeginAsync(tmp189, cancellationToken);
            var tmp190 = new TField();
            if ((Page_locations != null))
            {
               tmp190.Name = "page_locations";
               tmp190.Type = TType.List;
               tmp190.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp190, cancellationToken);
               {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Page_locations.Count), cancellationToken);
                  foreach (global::Parquet.Thrift.PageLocation _iter191 in Page_locations)
                  {
                     await _iter191.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
               }
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is OffsetIndex other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return TCollections.Equals(Page_locations, other.Page_locations);
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Page_locations != null))
            {
               hashcode = (hashcode * 397) + TCollections.GetHashCode(Page_locations);
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp192 = new StringBuilder("OffsetIndex(");
         if ((Page_locations != null))
         {
            tmp192.Append(", Page_locations: ");
            Page_locations.ToString(tmp192);
         }
         tmp192.Append(')');
         return tmp192.ToString();
      }
   }

}
