/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Wrapper struct to specify sort order
   /// </summary>
   partial class SortingColumn : TBase
   {

      /// <summary>
      /// The column index (in this row group) *
      /// </summary>
      public int Column_idx { get; set; }

      /// <summary>
      /// If true, indicates this column is sorted in descending order. *
      /// </summary>
      public bool Descending { get; set; }

      /// <summary>
      /// If true, nulls will come before non-null values, otherwise,
      /// nulls go at the end.
      /// </summary>
      public bool Nulls_first { get; set; }

      public SortingColumn()
      {
      }

      public SortingColumn(int column_idx, bool @descending, bool nulls_first) : this()
      {
         this.Column_idx = column_idx;
         this.Descending = @descending;
         this.Nulls_first = nulls_first;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_column_idx = false;
            bool isset_descending = false;
            bool isset_nulls_first = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.I32)
                     {
                        Column_idx = await iprot.ReadI32Async(cancellationToken);
                        isset_column_idx = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Bool)
                     {
                        Descending = await iprot.ReadBoolAsync(cancellationToken);
                        isset_descending = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.Bool)
                     {
                        Nulls_first = await iprot.ReadBoolAsync(cancellationToken);
                        isset_nulls_first = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_column_idx)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_descending)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_nulls_first)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp116 = new TStruct("SortingColumn");
            await oprot.WriteStructBeginAsync(tmp116, cancellationToken);
            var tmp117 = new TField();
            tmp117.Name = "column_idx";
            tmp117.Type = TType.I32;
            tmp117.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
            await oprot.WriteI32Async(Column_idx, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp117.Name = "descending";
            tmp117.Type = TType.Bool;
            tmp117.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
            await oprot.WriteBoolAsync(Descending, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp117.Name = "nulls_first";
            tmp117.Type = TType.Bool;
            tmp117.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
            await oprot.WriteBoolAsync(Nulls_first, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is SortingColumn other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(Column_idx, other.Column_idx)
           && System.Object.Equals(Descending, other.Descending)
           && System.Object.Equals(Nulls_first, other.Nulls_first);
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + Column_idx.GetHashCode();
            hashcode = (hashcode * 397) + Descending.GetHashCode();
            hashcode = (hashcode * 397) + Nulls_first.GetHashCode();
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp118 = new StringBuilder("SortingColumn(");
         tmp118.Append(", Column_idx: ");
         Column_idx.ToString(tmp118);
         tmp118.Append(", Descending: ");
         Descending.ToString(tmp118);
         tmp118.Append(", Nulls_first: ");
         Nulls_first.ToString(tmp118);
         tmp118.Append(')');
         return tmp118.ToString();
      }
   }

}
