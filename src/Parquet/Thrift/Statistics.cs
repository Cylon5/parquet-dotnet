/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Statistics per row group and per page
   /// All fields are optional.
   /// </summary>
   partial class Statistics : TBase
   {
      private byte[] _max;
      private byte[] _min;
      private long _null_count;
      private long _distinct_count;
      private byte[] _max_value;
      private byte[] _min_value;

      /// <summary>
      /// DEPRECATED: min and max value of the column. Use min_value and max_value.
      /// 
      /// Values are encoded using PLAIN encoding, except that variable-length byte
      /// arrays do not include a length prefix.
      /// 
      /// These fields encode min and max values determined by signed comparison
      /// only. New files should use the correct order for a column's logical type
      /// and store the values in the min_value and max_value fields.
      /// 
      /// To support older readers, these may be set when the column order is
      /// signed.
      /// </summary>
      public byte[] Max
      {
         get
         {
            return _max;
         }
         set
         {
            __isset.max = true;
            this._max = value;
         }
      }

      public byte[] Min
      {
         get
         {
            return _min;
         }
         set
         {
            __isset.min = true;
            this._min = value;
         }
      }

      /// <summary>
      /// count of null value in the column
      /// </summary>
      public long Null_count
      {
         get
         {
            return _null_count;
         }
         set
         {
            __isset.null_count = true;
            this._null_count = value;
         }
      }

      /// <summary>
      /// count of distinct values occurring
      /// </summary>
      public long Distinct_count
      {
         get
         {
            return _distinct_count;
         }
         set
         {
            __isset.distinct_count = true;
            this._distinct_count = value;
         }
      }

      /// <summary>
      /// Min and max values for the column, determined by its ColumnOrder.
      /// 
      /// Values are encoded using PLAIN encoding, except that variable-length byte
      /// arrays do not include a length prefix.
      /// </summary>
      public byte[] Max_value
      {
         get
         {
            return _max_value;
         }
         set
         {
            __isset.max_value = true;
            this._max_value = value;
         }
      }

      public byte[] Min_value
      {
         get
         {
            return _min_value;
         }
         set
         {
            __isset.min_value = true;
            this._min_value = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool max;
         public bool min;
         public bool null_count;
         public bool distinct_count;
         public bool max_value;
         public bool min_value;
      }

      public Statistics()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.String)
                     {
                        Max = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.String)
                     {
                        Min = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.I64)
                     {
                        Null_count = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 4:
                     if (field.Type == TType.I64)
                     {
                        Distinct_count = await iprot.ReadI64Async(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 5:
                     if (field.Type == TType.String)
                     {
                        Max_value = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 6:
                     if (field.Type == TType.String)
                     {
                        Min_value = await iprot.ReadBinaryAsync(cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp0 = new TStruct("Statistics");
            await oprot.WriteStructBeginAsync(tmp0, cancellationToken);
            var tmp1 = new TField();
            if ((Max != null) && __isset.max)
            {
               tmp1.Name = "max";
               tmp1.Type = TType.String;
               tmp1.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteBinaryAsync(Max, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Min != null) && __isset.min)
            {
               tmp1.Name = "min";
               tmp1.Type = TType.String;
               tmp1.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteBinaryAsync(Min, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.null_count)
            {
               tmp1.Name = "null_count";
               tmp1.Type = TType.I64;
               tmp1.ID = 3;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteI64Async(Null_count, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if (__isset.distinct_count)
            {
               tmp1.Name = "distinct_count";
               tmp1.Type = TType.I64;
               tmp1.ID = 4;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteI64Async(Distinct_count, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Max_value != null) && __isset.max_value)
            {
               tmp1.Name = "max_value";
               tmp1.Type = TType.String;
               tmp1.ID = 5;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteBinaryAsync(Max_value, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((Min_value != null) && __isset.min_value)
            {
               tmp1.Name = "min_value";
               tmp1.Type = TType.String;
               tmp1.ID = 6;
               await oprot.WriteFieldBeginAsync(tmp1, cancellationToken);
               await oprot.WriteBinaryAsync(Min_value, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is Statistics other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.max == other.__isset.max) && ((!__isset.max) || (TCollections.Equals(Max, other.Max))))
           && ((__isset.min == other.__isset.min) && ((!__isset.min) || (TCollections.Equals(Min, other.Min))))
           && ((__isset.null_count == other.__isset.null_count) && ((!__isset.null_count) || (System.Object.Equals(Null_count, other.Null_count))))
           && ((__isset.distinct_count == other.__isset.distinct_count) && ((!__isset.distinct_count) || (System.Object.Equals(Distinct_count, other.Distinct_count))))
           && ((__isset.max_value == other.__isset.max_value) && ((!__isset.max_value) || (TCollections.Equals(Max_value, other.Max_value))))
           && ((__isset.min_value == other.__isset.min_value) && ((!__isset.min_value) || (TCollections.Equals(Min_value, other.Min_value))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((Max != null) && __isset.max)
            {
               hashcode = (hashcode * 397) + Max.GetHashCode();
            }
            if ((Min != null) && __isset.min)
            {
               hashcode = (hashcode * 397) + Min.GetHashCode();
            }
            if (__isset.null_count)
            {
               hashcode = (hashcode * 397) + Null_count.GetHashCode();
            }
            if (__isset.distinct_count)
            {
               hashcode = (hashcode * 397) + Distinct_count.GetHashCode();
            }
            if ((Max_value != null) && __isset.max_value)
            {
               hashcode = (hashcode * 397) + Max_value.GetHashCode();
            }
            if ((Min_value != null) && __isset.min_value)
            {
               hashcode = (hashcode * 397) + Min_value.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp2 = new StringBuilder("Statistics(");
         int tmp3 = 0;
         if ((Max != null) && __isset.max)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Max: ");
            Max.ToString(tmp2);
         }
         if ((Min != null) && __isset.min)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Min: ");
            Min.ToString(tmp2);
         }
         if (__isset.null_count)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Null_count: ");
            Null_count.ToString(tmp2);
         }
         if (__isset.distinct_count)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Distinct_count: ");
            Distinct_count.ToString(tmp2);
         }
         if ((Max_value != null) && __isset.max_value)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Max_value: ");
            Max_value.ToString(tmp2);
         }
         if ((Min_value != null) && __isset.min_value)
         {
            if (0 < tmp3++) { tmp2.Append(", "); }
            tmp2.Append("Min_value: ");
            Min_value.ToString(tmp2);
         }
         tmp2.Append(')');
         return tmp2.ToString();
      }
   }

}
