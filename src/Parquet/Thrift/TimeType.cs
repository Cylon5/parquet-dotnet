/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   /// <summary>
   /// Time logical type annotation
   /// 
   /// Allowed for physical types: INT32 (millis), INT64 (micros, nanos)
   /// </summary>
   partial class TimeType : TBase
   {

      public bool IsAdjustedToUTC { get; set; }

      public global::Parquet.Thrift.TimeUnit Unit { get; set; }

      public TimeType()
      {
      }

      public TimeType(bool isAdjustedToUTC, global::Parquet.Thrift.TimeUnit unit) : this()
      {
         this.IsAdjustedToUTC = isAdjustedToUTC;
         this.Unit = unit;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            bool isset_isAdjustedToUTC = false;
            bool isset_unit = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Bool)
                     {
                        IsAdjustedToUTC = await iprot.ReadBoolAsync(cancellationToken);
                        isset_isAdjustedToUTC = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Struct)
                     {
                        Unit = new global::Parquet.Thrift.TimeUnit();
                        await Unit.ReadAsync(iprot, cancellationToken);
                        isset_unit = true;
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_isAdjustedToUTC)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_unit)
            {
               throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp46 = new TStruct("TimeType");
            await oprot.WriteStructBeginAsync(tmp46, cancellationToken);
            var tmp47 = new TField();
            tmp47.Name = "isAdjustedToUTC";
            tmp47.Type = TType.Bool;
            tmp47.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp47, cancellationToken);
            await oprot.WriteBoolAsync(IsAdjustedToUTC, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if ((Unit != null))
            {
               tmp47.Name = "unit";
               tmp47.Type = TType.Struct;
               tmp47.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp47, cancellationToken);
               await Unit.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is TimeType other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return System.Object.Equals(IsAdjustedToUTC, other.IsAdjustedToUTC)
           && System.Object.Equals(Unit, other.Unit);
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            hashcode = (hashcode * 397) + IsAdjustedToUTC.GetHashCode();
            if ((Unit != null))
            {
               hashcode = (hashcode * 397) + Unit.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp48 = new StringBuilder("TimeType(");
         tmp48.Append(", IsAdjustedToUTC: ");
         IsAdjustedToUTC.ToString(tmp48);
         if ((Unit != null))
         {
            tmp48.Append(", Unit: ");
            Unit.ToString(tmp48);
         }
         tmp48.Append(')');
         return tmp48.ToString();
      }
   }

}
