/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

   partial class TimeUnit : TBase
   {
      private global::Parquet.Thrift.MilliSeconds _MILLIS;
      private global::Parquet.Thrift.MicroSeconds _MICROS;
      private global::Parquet.Thrift.NanoSeconds _NANOS;

      public global::Parquet.Thrift.MilliSeconds MILLIS
      {
         get
         {
            return _MILLIS;
         }
         set
         {
            __isset.MILLIS = true;
            this._MILLIS = value;
         }
      }

      public global::Parquet.Thrift.MicroSeconds MICROS
      {
         get
         {
            return _MICROS;
         }
         set
         {
            __isset.MICROS = true;
            this._MICROS = value;
         }
      }

      public global::Parquet.Thrift.NanoSeconds NANOS
      {
         get
         {
            return _NANOS;
         }
         set
         {
            __isset.NANOS = true;
            this._NANOS = value;
         }
      }


      public Isset __isset;
      public struct Isset
      {
         public bool MILLIS;
         public bool MICROS;
         public bool NANOS;
      }

      public TimeUnit()
      {
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
         iprot.IncrementRecursionDepth();
         try
         {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
               field = await iprot.ReadFieldBeginAsync(cancellationToken);
               if (field.Type == TType.Stop)
               {
                  break;
               }

               switch (field.ID)
               {
                  case 1:
                     if (field.Type == TType.Struct)
                     {
                        MILLIS = new global::Parquet.Thrift.MilliSeconds();
                        await MILLIS.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 2:
                     if (field.Type == TType.Struct)
                     {
                        MICROS = new global::Parquet.Thrift.MicroSeconds();
                        await MICROS.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  case 3:
                     if (field.Type == TType.Struct)
                     {
                        NANOS = new global::Parquet.Thrift.NanoSeconds();
                        await NANOS.ReadAsync(iprot, cancellationToken);
                     }
                     else
                     {
                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     }
                     break;
                  default:
                     await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                     break;
               }

               await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
         }
         finally
         {
            iprot.DecrementRecursionDepth();
         }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
         oprot.IncrementRecursionDepth();
         try
         {
            var tmp38 = new TStruct("TimeUnit");
            await oprot.WriteStructBeginAsync(tmp38, cancellationToken);
            var tmp39 = new TField();
            if ((MILLIS != null) && __isset.MILLIS)
            {
               tmp39.Name = "MILLIS";
               tmp39.Type = TType.Struct;
               tmp39.ID = 1;
               await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
               await MILLIS.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((MICROS != null) && __isset.MICROS)
            {
               tmp39.Name = "MICROS";
               tmp39.Type = TType.Struct;
               tmp39.ID = 2;
               await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
               await MICROS.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if ((NANOS != null) && __isset.NANOS)
            {
               tmp39.Name = "NANOS";
               tmp39.Type = TType.Struct;
               tmp39.ID = 3;
               await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
               await NANOS.WriteAsync(oprot, cancellationToken);
               await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
         }
         finally
         {
            oprot.DecrementRecursionDepth();
         }
      }

      public override bool Equals(object that)
      {
         if (!(that is TimeUnit other)) return false;
         if (ReferenceEquals(this, other)) return true;
         return ((__isset.MILLIS == other.__isset.MILLIS) && ((!__isset.MILLIS) || (System.Object.Equals(MILLIS, other.MILLIS))))
           && ((__isset.MICROS == other.__isset.MICROS) && ((!__isset.MICROS) || (System.Object.Equals(MICROS, other.MICROS))))
           && ((__isset.NANOS == other.__isset.NANOS) && ((!__isset.NANOS) || (System.Object.Equals(NANOS, other.NANOS))));
      }

      public override int GetHashCode()
      {
         int hashcode = 157;
         unchecked
         {
            if ((MILLIS != null) && __isset.MILLIS)
            {
               hashcode = (hashcode * 397) + MILLIS.GetHashCode();
            }
            if ((MICROS != null) && __isset.MICROS)
            {
               hashcode = (hashcode * 397) + MICROS.GetHashCode();
            }
            if ((NANOS != null) && __isset.NANOS)
            {
               hashcode = (hashcode * 397) + NANOS.GetHashCode();
            }
         }
         return hashcode;
      }

      public override string ToString()
      {
         var tmp40 = new StringBuilder("TimeUnit(");
         int tmp41 = 0;
         if ((MILLIS != null) && __isset.MILLIS)
         {
            if (0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("MILLIS: ");
            MILLIS.ToString(tmp40);
         }
         if ((MICROS != null) && __isset.MICROS)
         {
            if (0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("MICROS: ");
            MICROS.ToString(tmp40);
         }
         if ((NANOS != null) && __isset.NANOS)
         {
            if (0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("NANOS: ");
            NANOS.ToString(tmp40);
         }
         tmp40.Append(')');
         return tmp40.ToString();
      }
   }

}
