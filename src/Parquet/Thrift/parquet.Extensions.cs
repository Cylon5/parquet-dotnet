/*
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Collections.Generic;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{
   static class parquetExtensions
   {
      public static bool Equals(this List<bool> instance, object that)
      {
         if (!(that is List<bool> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<bool> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<byte[]> instance, object that)
      {
         if (!(that is List<byte[]> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<byte[]> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.ColumnChunk> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.ColumnChunk> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.ColumnChunk> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.ColumnOrder> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.ColumnOrder> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.ColumnOrder> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.Encoding> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.Encoding> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.Encoding> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.KeyValue> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.KeyValue> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.KeyValue> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.PageEncodingStats> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.PageEncodingStats> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.PageEncodingStats> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.PageLocation> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.PageLocation> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.PageLocation> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.RowGroup> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.RowGroup> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.RowGroup> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.SchemaElement> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.SchemaElement> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.SchemaElement> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<global::Parquet.Thrift.SortingColumn> instance, object that)
      {
         if (!(that is List<global::Parquet.Thrift.SortingColumn> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<global::Parquet.Thrift.SortingColumn> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<long> instance, object that)
      {
         if (!(that is List<long> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<long> instance)
      {
         return TCollections.GetHashCode(instance);
      }


      public static bool Equals(this List<string> instance, object that)
      {
         if (!(that is List<string> other)) return false;
         if (ReferenceEquals(instance, other)) return true;

         return TCollections.Equals(instance, other);
      }


      public static int GetHashCode(this List<string> instance)
      {
         return TCollections.GetHashCode(instance);
      }


   }
}
